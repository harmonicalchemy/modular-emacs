# -**- mode: org; coding: utf-8 -**-
#+TITLE: HAP - Simple DATE-ONLY Journal Skeleton
#+TEXT: Copyright © 2021-2025 by Harmonic Alchemy Productions & Others 
#+AUTHOR: Alisha Awen - Harmonic Alchemy Productions
#+EMAIL: harmonicalchemy@proton.me
#+DATE: {{{time(%A %Y-%b-%d %l%p)}}}
#+TEXT: Created: <2023-07-26 Wed>
#+TEXT: Last Published: <NOT-published>
#+FILETAGS: templates logs unpublished

#+DESCRIPTION: HAP Modular Emacs: Org Mode Simple DATE-ONLY Journal Notebook Template. This is an even more minimalist version of: HAP_Simple-Log-Book-Skeleton.org. This Template's SOLE PURPOSE is for less formal journals, Dairies, or other docs that DO NOT themselves need to get published as PDF files as well as not needing any time tracking (clocking in/out etc.) or the overhead that goes with that...  DATETIME STAMPS under headings as well as keeping entries in chronological order under YYYY Headings is all you need to keep this Journal Organized... This Template is NOT Set Up to be published outside of org mode except for places like GitHub (which automatically renders to HTML transparently) 

* ⚒ setup-config:                                            :noexport: 

:READ_ME_FIRST: 
=Instructions:= [0/3] /(How to Install & Use This Template)/ 
=Last Modified:= <2025-05-21 Wed>

To use *HAP_README-Doc-Skeleton.org* Org-Mode README Doc Template for your own projects, =Perform The Following Steps:= 

/Use the org-mode Checkboxes to Help You Keep Track of Progress/ 

1) [ ] *Clone a Copy of This File:* 

             Put your clone within any existing writing or coding project's MASTER FOLDER or anywhere you need to have a simple NON-PUBLISHING README.org file associated with source code or other files...

             Existing MASTER FOLDERS contain other files for other projects as well as the SETUPFILES and MEDIA required by this README.org file...

             =Note:= If you put this file within other Project's existing MASTER FOLDERS that contain existing ~.org~ files /(cloned from other HAP_Doc-Skeleton/ /template files)/ Pay CLOSE Attention to Steps 3 & 4 below to decide the correct action to take during those steps...

             =Do NOT OVERWRITE ANY PRE-EXISTING FILES or FOLDERS!!!=

             =OTHERWISE:= If this is a Brand NEW Project, name its NEW MASTER FOLDER to reflect what this README Doc is about...

             =OTHER Files/Folders May also be placed Within your MASTER FOLDERS...=

2) [ ] =Start Composing your README Content NOW:= 

             =NOTE:= You are most likely doing this because you have a project that needs a README File included as the Start Here Document for that project... Therefore... as soon as you are done with the first steps above, =STOP= and immediately begin composing your README Content within the: *📖 README* Binder =NOW=...

             =Add Sub headings below for your README as needed...=

             *btw*, if you Have *Harmonic Alchemy Modular Emacs* fully installed and have enabled the ~Xah-Fly-Keys~ module, you can quickly and easily insert your own /:README:/ drawers for your own purposes by typing: ~SPACE e r~ on an empty line while in command mode... Type those two keys, and the drawer is created for you automatically and opened...

3) [ ] [0/11] =Finish Setting Up The Rest Of This Project LATER= 

      - [ ] *Change Title of :LATEST_UPDATE: drawer ABOVE:* 

           AFTER Cloning, Change *:LATEST_UPDATE:* drawer title ABOVE /(WITHIN YOUR CLONE, NOT THE ORIGINAL!)/ to *:LATEST_TEMPLATE_UPDATE:* AND Follow Instructions within it...

      - [ ] *Copy/Clone:* ~./media~ /(and contents)/ *to your new project's MASTER FOLDER:* 

           Copy this directory /(into your MASTER FOLDER as a sibling of this file).../
           Any external documents or images referenced by your *README Document* should be placed within this ~./media/~ directory...

           All external links, images, within the boilerplate examples of this template may be used as examples for getting your own images, and external attachments linked properly...  

           This single ~./media~ directory will serve media and external attachments for this and other Modular Emacs Document TEMPLATE ~.org~ files that may exist within this MASTER FOLDER now or in the future...

           /(IF/WHEN THEY /WERE/ARE COPIED HERE)/

           =Note:=  You DON'T need to copy the ~./auto/~ directory... That directory may be automatically created by *AuxTeX* when exporting other ~.org~ files based on *Modular Emacs* TEMPLATES but =NOT= from this ~.org~ file which is not set up for exporting to ~.PDF~...

      - [ ] *Copy/Clone:* ~./org-templates~ /(and all contents)/ *to your MASTER FOLDER:* 

            =WARNING!:= To avoid overwriting existing files, DO NOT COPY this ~./org-templates~ to your MASTER FOLDER IF ONE ALREADY EXISTS!

            But DO follow the rest of this step so you will know what you should do...

             =OTHERWISE For MASTER FOLDERS that DO NOT already have one:= 
             Copy this NEW directory to serve as your: =NEW Readme Doc's MASTER FOLDER=
             /(i.e., as a sibling/ /of this README.org file).../

             =Note:= ONLY ONE SETUPFILE Within this directory is called out and included by this ~README.org~ file /(within the file header above)/

             =WARNING:= There may ALREADY be an ~org-templates~ directory existing within your MASTER FOLDER! In that case you will need to merge: ~default-tags.org~ /(contained within)/ into your existing copy of it instead...       

             =YOU WON'T WANT TO OVERRITE EXISTING FILES= within this directory IF you are already using it for OTHER .org Files, /(and they were modified!!!)/ but you may need to update existing files you are NOT using currently if/when you DO start using them...

             =Other SETUPFILES= within this directory are intended to be used by other document style project templates and are not needed for this: ~README.org~ Document... You may remove the extra files if you wish... 

             =HOWEVER:= If you decide to clone another ~HAP_<book-template>.org~ file into this project folder it will pick up its associated SETUPFILES automatically because this folder                 already exists! Consider this case if/when you decide to delete other UNUSED SETUPFILES... They are small text files not really bothering you...

             /(YOU MAY NEED THEM LATER DEPENDING ON YOUR CASE)/ 

      - [ ] *Change the* ~#+TITLE:~ *directive at the top of this file:* 

           Change to: /"your Readme Document's REAL Project Title"/

      - [ ] *Change the* ~#+TEXT: Copyright © 2022:~ *directive top of this file:* 

           Change to: /"Copyright © your info here"/ You are the copyright owner of your own documents created from clones of these master templates... /(but these MASTER Template Files are to stay under/ /Harmonic Alchemy Productions copyright. Any Attribution to me/ /for the template structure of your published docs will be/ /appreciated... but unnecessary... Thanks! ;-)/

      - [ ] *Change the* ~#+AUTHOR:~ *directive at the top of this file:* 

           Change to: /"your NAME"/ 

      - [ ] *Change the* ~#+EMAIL:~ *directive at the top of this file:* 

           Change to: /"your EMAIL"/ 

      - [ ] *Change the* ~#+TEXT: Created:~ *TIMESTAMP at the top of this file:* 

           Put your cursor on the TIMESTAMP: /i.e.,/ <2022-10-05 Wed> and type: ~C-c . . RETURN~ The TIMESTAMP will update to NOW.

           =LEAVE THIS DATE ALONE after Setting It The FIRST Time=

           This Date reflects the time/date that you first created this new document It should NEVER change after that...

      - [ ] *Change the* ~#+TEXT: Last Published:~ *TIMESTAMP at Publish Time:* 

            =Don't Change This UNTIL= You have completed some MAJOR Release of the files or code that this ~README.org~ doc refers to and this README reflects the status of that MAJOR UPDATE /(e.g., as published somewhere, in a public repository etc...)/

            Until that publishing time comes leave it alone as: ~<NOT Published>~
          
            As soon as this is published as part of a major release, etc, Replace the <unpublished> placeholder with a REAL TIMESTAMP by typing: ~C-c . . RETURN~ The new Last Published: <TIMESTAMP> will appear in place... Do this ANY time you have completed some major update, have published that update and this file needs to reflect that update...             /(this will help you keep track)/ 

      - [ ] *Change the* ~#+FILETAGS:~ *directive at the top of this file:* 

           Add your own tags that match the context of your README document...

      - [ ] *Change the* ~#+DESCRIPTION:~ *directive at the top of this file:* 

           Compose your ~README~ Doc's Description as a short paragraph here... and then use that to change the directive above...

4) *Purpose of the:* ~./org-templates~  *Directory:* 

    The files in here are automatically linked and included within this template. You don't need to change those settings unless you wish to customize the already customized tags...

    /They are allready set up correctly for the General Documents genre,/ /and the category is all set as well... But you can and may modify/ /the original files to fit your needs.../
       
    Other SETUPFILES within this directory are intended to be used by other document style project templates and are not needed for this: ~README.org~ Document... You may remove the extra files if you wish... 

    =HOWEVER:= If you decide to clone another ~HAP_<book-template>.org~ file into this project folder it will pick up its associated SETUPFILES automatically because this folder already exists! Consider this case if/when you decide to delete other UNUSED SETUPFILES... They are small text files not really bothering you...

    /(YOU MAY NEED THEM LATER DEPENDING ON YOUR CASE)/

    =AND= You won't want to OVERRITE existing files within this directory you are already using, /(and modified!!!)/ but you may need to update existing files you are NOT using currently if/when you DO start using them...

    The DEFAULT Tags defined for all project templates are useful for most situations and SOME tags are ALWAYS to be defined for this LaTeX publishing system to work.

    /Change the SETUPFILE name ABOVE and within this directory from/ ~default-tags.org~ /to another name and-or replace some -BUT NOT ALL-/ /of the tags within to your own tags... see instructions inside the/ /file.../

5) =This File is NOT SET UP TO BE EXPORTED TO PDF= 

      You may wish to export OTHER Modular Emacs based .org files within this MASTER FOLDER to PDF format however... To do that follow the instructions within those .org files

6) *Handling Images:* 

   Some Images may render too large or too small to fit on a page of an exported version of this file... This is easy do fix within your content on an image by image basis...
      
   Use *LaTeX* and/or *HTML* attributes as follows on the images that need to be a different size...

   =NOTE:= Within Org-Mode =if you do NOT see images= but instead a LINK *USE:* ~C-c~ ~C-x~ ~C-V~ to Toggle back to image view...

   =Example:=
      
       #+CAPTION: Example larger size .png file 
       #+NAME:  example:00001
       #+attr_html: :width 600px
       #+attr_latex: :width 100px
      [[./media/lavender-banner.png]]

=If you Experience Problems Please Open an ISSUE At:= https://github.com/harmonicalchemy/modular-emacs/issues
   
Please use Issues to Ask Questions, Report Problems/Bugs etc., and Suggest Ideas for Improvement... =You guys are my Product Managers=  I am only a User of ONE "seat". Other folks UX metrics are sorely needed!! Thanks!

=Enjoy!= - Alisha Awen
:END:
:LATEST_UPDATE: 
=Last Updated:= <2025-06-22 Sun> /(This TEMPLATE IS ALL SET for Prime Time)/ 

=YOU MAY REMOVE This Drawer= from your own clones of this template if it is bothering you... This drawer is only here as an aid for: HAP Modular Emacs DOC TEMPLATE housekeeping/updating tasks...

=HOWEVER= you may also wish use the instructions here for the same purpose... i.e., to keep your existing Modular Emacs based org documents /(created with this template)/ in sync with the latest updates of the template they were cloned from... =NOTE:= If you have CHANGED MANY of the settings within your clone since the last template update you are advised to do a VISUAL diff /(i.e., visually line by line, not automated)/ of the two files to see whether you want to switch your settings to the new updated ones... It all depends on your use case... so check that first...

=If you do wish employ this little project management thing... Read On Below...= 
  
- =INTERNAL USE Instructions:= [0/1] /(END USERS SKIP THIS BULLET)/ 

    This bullet is NOT for END USERS... This is /"Note to Self"/ stuff... No Worries... 

     - [ ] =MASTER TEMPLATE ONLY= *Keep The Above Timestamp Up To Date:* 

       Anytime you make CHANGES to the META DATA within this TEMPLATE you must UPDATE the =Last Updated:= TIMESTAMP above... *DO THIS ALWAYS*  ...

       =DON'T FORGET!= This information will help you keep Internal Docs in SYNC with the TEMPLATES that you make and present PUBLICLY to the world...

- =PUBLIC USE Instructions:= [0/3] /(FOR CLONES OF THIS TEMPLATE)/ 

     - [ ] *REMOVE INTERNAL USE Instructions* /(and all under the bullet)/ 

          You don't need this in the file you created from a clone of this template...

     - [ ] *UPDATE Last Updated:* ~<timestamp>~ After Making Changes to this file: 

       Copies of this file within your own projects will change over time as you try out different OPTIONS etc... You need to keep track of the LAST time this file was changed within your projects... /(and you may have copies of this file in many projects)/ All of them may have different settings after time goes on... The =Last Updated:= heading above lets you know when those changes happened... That knowledge will help you when you are comparing updated template files from the repository... 

     - [ ] *COMPARE the TIMESTAMPS between THIS TEMPLATE and your CLONES:* 

          ~Org-Mode~ settings and meta data within CLONES of this SETUPFILE TEMPLATE will get out of sync after a while due to Harmonic Alchemy Modular Emacs version updates etc...

          Check the TIMESTAMPS /(within this TEMPLATE and your CLONE of it)/ to see if they are different...

          If they are, the clone's settings need to be updated... /(i.e., brought into sync with its template - MERGE)/ You will need to perform any needed merging/replacing of BOILERPLATE and/or meta data. /(e.g, *:README:* drawers, etc.)/

          =NOTE:= You may have purposefully changed some of the actual SETTINGS/OPTIONS below so be careful not to sync those OPTIONS with the new template update if the feature of those OPTIONS are NOT your intention... =ALSO=... If the timestamp in your cloned version of this file is NEWER than the template... You don't have to do anything because that was done before already...

          UPDATING the TEMPLATES THEMSELVES is ANOTHER STORY... /(and for another discussion)/ because You will need to do that in a local git branch keeping your own local commits to that branch only so that the master tracking branch can stay clean... /(that way you will have your own set of customized TEMPLATES to use)/ while still having the DEFAULT TEMPLATES in the master branch... /(but lets save that conversation for later ok?)/
:END:
:SETUP_README: 

=Setup TAGS:=

For Cloned Versions of this template, the file/paths below will be relative to your parent project directory and as such, should be all set to your new: ~.../your_README.org_File's/org-templates/~ directory...

*SETUPFILE:* ~default-tags.org~ is where tags are defined for this project... If you need to change the category, do it in your cloned version of default-tags.org...  If you rename default-tags.org file from "default" to something more specific, you will need to change the ~#+SETUPFILE: ./org-templates/default-tags.org~ line below to reflect your new file name as well...  You may change any of the tags except important ones to what ever you wish... Read the *:README:* drawer within the file for more information...

The Existing Tags are useful for most situations within this context, and some of the tags MUST ALWAYS be defined for this LaTeX publishing system to work correctly...

This file may be used by other ~.org~ files within this Master Folder... If you need to customize them specifically for this ~.org~ file alone, you should copy and rename: ~default-tags.org~ and modify your renamed copy instead...
              
If you do this, you will ALSO need to change the ~#+SETUPFILE: ./org-templates/default-tags.org~ directive below to reflect your changed file name...

/(change the name from/ ~default-tags.org~ /to another name/ /and-or replace some (but NOT ALL) of the tags within/ /to your own tags... see instructions inside the file)/
:END: 

#+SETUPFILE: ./org-templates/default-tags.org
#+SETUPFILE: ./org-templates/gen-doc.org

* 📒 JOURNAL:                                                   :export: 
<<-JOU>>
** 📅 2025: 
<<-JOU_2025>> 
*** NEW 🗓 EXAMPLE Journal Entry /(Cloned from TEMPLATES)/ 
<2021-03-29 Mon>  
<<-JOU_example-entry>>
:HOW-TO-USE-THIS: 
=COMMANDEERING CLONES of this BOILERPLATE JOURNAL Entry TEMPLATE:= 

- [ ] *COMMANDEER Your New CLONE:* 

  The structure of this Journal Entry Template's content layout is all set up for you ahead of time to allow you to immediately begin writing... /(You only need to change titles etc...)/ 

  After cloning, =RENAME= *BOILERPLATE JOURNAL Entry* /(JOURNAL Entry TEMPLATE)/ to a *Unique Title* in order to commandeer the journal entry item for your own needs... 

  =Do NOT PUT "JOURNAL" in your Title!= 

- [ ] *UPDATE MAIN Timestamp to TODAY:* 

  Place your cursor directly on the existing timestamp directly under the title of THIS CLONED or REPURPOSED *🗓 BOILERPLATE Journal Entry:* and enter the key binding: ~C-c .~ /(i.e., press/ ~Ctrl~ /key while holding/ ~c~ /and then type a dot ~.~ /)/ A date chooser panel will pop up... 

- [ ] *Type one more dot:* 

  Type one more dot ~.~ to force the calendar selection to the current time and date and then, Press ~ENTER~ to accept your choice... /This will update the existing BOILERPLATE timestamp with TODAY's date/time.../

  Check to make sure the timestamp was properly updated then move on to the next step...

  This timestamp will not be updated after that, /(Just as in a Diary Page)/...  You will most likely create one Journal entry per day, Timestamped to that day only...

  =NOTE:= /This is the ONLY Time Tracking Feature of this Journal.../

  =NOTE:= It may be a good idea to place *Month* Headings under the *📅 YYYY:* headings for better chronological organization...

=NOTE:= You May or May not wish to set additional ~<timestamps>~ under sub headings appearing under the *📒 Details:* section... =ALSO:= for most Daily Journal Entries you may have only a few things to say and therefore do away with ALL Sub Headings below the Details Section entirely or even the Details Heading altogether...

=Adjusting ANCHORS to make them UNIQUE:=

=NOTE:= All of this work in the beginning will help keep your anchors unique, and also add an extra *KM* dimension of *category* to them automagically...

Your unique anchors may be used to link to this Journal Entry from other Journal Entries, and quite possibly unique enough to reach it from external org docs referencing the single anchor alone from an org link... /(I have not really tested reaching the anchors from external docs... YMMV, but you can always add a qualified path before that anchor and it will work from external org docs fine that way)/

It would be wise to follow this convention when you create anchors elsewhere within ALL of your Writing Projects created from HAP Modular Emacs Document Skeleton Template files...

If you wish to change any of this, go ahead and do what ever you want... For simplicity's sake, follow the instructions below... There are ways to use :PROPERTY: directives to get your links GLOBAL as well... I prefer to do it manually... The alternate is a mess IMHO... I don't have time to spend on this mess... What I have currently works nice and simple for me... Probably you too... /(trust me I have tried EVERYTHING)/ lol

After completing the initial CLONING steps above the next thing to do is adjust all ANCHORS contained within your CLONE to match changed titles, etc... /(read HAP ORG-MODE ANCHOR CONVENTIONS first)/

- =HAP ORG-MODE ANCHOR CONVENTIONS:= 

  The ANCHORS /(below the headings)/ MUST BE UNIQUE!

  I created the *Following Convention* for making unique mnemonic anchors within ALL of these ~HAP_Doc-Skeleton.org~ Template files...

  For *MAIN HEADINGS* it looks like this: ~PREFIX_label~...

  For *SUB HEADINGS* it looks like this: ~PREFIX_LABEL_postfix~

  The ANCHOR ~PREFIX~ for JOURNAL FILES /(i.e., this document)/ is ~-JOU~ 

  The PREFIX is there to show this anchor belongs to a Simple *Date-ONLY Journal* file. It starts with a dash "-" character, which is intended to be connected to a unique mnemonic you will be adding to nail down WHICH Journal? For example: ~MY-JOU_~  , ~AUTO-JOU_~ etc...

  Other types of documents will have a different PREFIX to identify the type of doc it is along with a unique mnemonic attached to nail down WHICH ONE?

  The ~_label~ portion of the ANCHOR is a shortened lower case version of the Heading TITLE...

  The ~_postfix~ portion is NOT USED in the MAIN Headings... It is only present under SUB-HEADINGS as it is the shortened lower case version of the sub-heading title...

  =NOTE:= The ~_label~ portion of the MAIN Heading ANCHOR will change to UPPER CASE ~_NAME_~  when it is an ANCHOR for a sub heading...

  You also need to insure your anchors /(below the headings)/ are unique! 

- [ ] *Change The MAIN Journal Entry ANCHOR:* 

  USE the Above =HAP ORG-MODE ANCHOR CONVENTIONS= to Change the MAIN ANCHOR directly under the Journal Entry's *Main Title Heading* to match your NEW *Journal Entry's Title*... /(No sub-titles will be POSTFIX here)/ 

  Leave ~-JOU_~ as the ANCHOR's PREFIX /(as in the boilerplate ANCHOR above)/ and ADD your UNIQUE ID for this Journal to the front of the prefix: e.g,. ~AUTO-JOU_~ ,  ~MY-JOU_~ etc...

  Change ~_boilerplate-entry~ i.e., the ~_label~ portion of the ANCHOR, to a short but unique abbreviation, acronym, or mnemonic of the Journal Entry's *NEW Title*... /(don't make it too cryptic to the point that you can no longer cognitively connect your mnemonic with the actual title)/ but keep it short and simple as possible...

  Keep the underscore that separates the ~-PREFIX_~ of this ANCHOR from the renamed ~_label~ portion of this NEW *Journal Entry*... Make this title portion of the ANCHOR all lower case... Use dashes to connect words within your title portion of  the ANCHOR...

  =NOTE:= for the BOILERPLATE Headings: i.e., *📒 Details:* , and *📚 Reference:* the ~_label~ portion of the ANCHOR is UPPER CASE... /(by design)/ 

  This MAIN ANCHOR does NOT contain a ~_postfix~  as  It is stand alone... The rest of the ANCHORS within this Journal WILL contain a ~_postfix~ mnemonic... /(all in lower case)/

  You will need to follow this exact convention for any new Headings or SUB Headings created...

  You may LINK to this Unique ANCHOR from other sections of this journal... /(Or even from/ ~.org~ /docs OUTSIDE of this file...)/

- [ ] *Change the 📒 Details: ANCHOR:* /<<-JOU_BOILERPLATE-ENTRY_details>>/ 

  For the *Details:* ANCHOR, you need to change the ~-PREFIX_~ and ~_LABEL~ portions, but leave the ~_postfix~ portion alone as you won't change this Heading's Name...

  ADD your unique mnemonic to the front of the ~-PREFIX_~ as described in: *Change The MAIN Journal Entry ANCHOR* above...

  =NOTE:= ~_LABEL~ is UPPER CASE here as this is a *Sub-Heading* of the *MAIN Journal Entry*...

  COPY the lower-case  ~_label~ portion from the ANCHOR under the *MAIN Journal Entry* and use that to rename "BOILERPLATE-ENTRY" within the *📒 Details:* ANCHOR... CHANGE it to UPPER CASE as well, to comply with HAP Org-Mode ANCHOR Conventions...

  *Leave the* ~_postfix~ *Portion ALONE* because the Details Heading does not change... 

- [ ] *Change the 📚 Reference: ANCHOR Link:* /<<-JOU_BOILERPLATE-ENTRY_ref>>/ 

  For the *Reference:* ANCHOR, you need to change the ~-PREFIX_~ and ~_LABEL~ portions, but leave the ~_postfix~ portion alone as you won't change this Heading's Name...

  ADD your unique mnemonic to the front of the ~-PREFIX_~ as described in: *Change The MAIN Journal Entry ANCHOR* above...

  =NOTE:= ~_LABEL~ is UPPER CASE here as this is a *Sub-Heading* of the *MAIN Journal Entry*...

  COPY the lower-case  ~_label~ portion from the ANCHOR under the *MAIN Journal Entry* and use that to rename "BOILERPLATE-ENTRY" within the *📚 Reference:* ANCHOR... CHANGE it to UPPER CASE as well, to comply with HAP Org-Mode ANCHOR Conventions...

  *Leave the* ~_postfix~ *Portion ALONE* because the Reference Heading does not change... 

- [ ] *Change ANCHORS of Sub Headings:* /<<-JOU_PARENT-HEADING_prefix>>/ 

  In the case of Sub Headings, you will need to =CHANGE the ENTIRE ANCHOR=, Keeping the text's CASE intact, while changing the text of the PREFIX, LABEL, and postfix...

  If you need to make a NEW Sub-Heading Copy an existing Sub-Heading /(a sibling of the place where you want to make a new sub-heading)/ and modify that ANCHOR in the same way as above...

  If you decide to Create a *New Sub-Heading* =FROM SCRATCH= or suddenly find you have no siblings to CLONE, make your NEW ANCHOR look like this:

  ~PREFIX_LABEL_postfix~ where ~PREFIX~ is pretty much the same for all the ANCHORS, ~LABEL~ is the title of the *Parent Heading*, and ~postfix~ is the title of this *sub-heading*... /(all mnemonics)/ 

  COPY the UPPER-CASE ~_LABEL~ mnemonic from the ANCHOR under the Parent of this *Sub-Heading* and place that =AS IS= AFTER the ~PREFIX~ separated by an underscore character... 

  Create a ~_postfix~ mnemonic representing the *sub-heading* title and place that after the ~_LABEL~ mnemonic separated by an underscore character...

=NOTE:= You will be doing these operations a lot, making sure the CASE shifting of parent heading mnemonics are done correctly etc... /(Soon enough... you will have figured out the pattern, and it will become second nature for you... I hope)/

=ENJOY USING YOUR BRAND NEW JOURNAL OF ANYTHING YOU WANT!=

- [ ] *You Are Now Ready To Start Writing NOW:* 

  You are ready to start making entries within your New Journal Entry... Your timestamp indicates the present, /-and-/ you are all set to begin writing...
:END: 

This section SERVES as your  =SUMMARY= for the =DETAILS= Section below... Unlike ~HAP_Simple-Log-Book-Skeleton.org~, This Date Only version does not add an independent SUMMARY section...  You can of course override that if you wish... /(but maybe you are using the WRONG Template? If you want a MORE FORMALIZED Summary?)/

=REPLACE ALL THIS HERE with your REAL Journal Entry SUMMARY=...

/(i.e., This Journal Entry is about: Yadda... Yadda... Yadda...)/ 

**** NEW 📒 Details: 
<<-JOU_EXAMPLE-ENTRY_details>>
***** NEW Item 1 /(placeholder)/ [0/3] 
<<JOURNAL_EXAMPLE-ENTRY-DETAILS_item-1>>
:BOILERPLATE: 

  =Delete This BOILERPLATE DRAWER If You Don't Need It...=

  The following list contains Babel Source Code Blocks that are
  often needed for something I am writing or "Logging" about...
  I use them so much I decided to include them in this template...

  - [ ] *__:* /(__)/

      #+begin_src conf
       keyword1:     Value1 
       keyword2:     Value2 
       keyword3:     Value 
      #+end_src

  - [ ] *__:* /(__)/

      #+begin_src bash
       sudo dnf install emacs
       sudo apt install emacs
      #+end_src

  - [ ] *__:* /(__)/

      #+BEGIN_SRC emacs-lisp :results output
       ;; Initialize Local Vars from GLOBAL CONSTANTS;
       (let ((h (list 'text-pixels ME--CODE-FRAME-HEIGHT))
             (w (list 'text-pixels ME--CODE-FRAME-WIDTH)))
         (princ "CAR h: ")
         (princ (car h))
         (princ "\n")
         (princ "CDR h: ")
         (princ (cdr h))
         (princ "\n\n")
         (princ "CAR w: ")
         (princ (car w))
         (princ "\n")
         (princ "CDR w: ")
         (princ (cdr w)))
      #+END_SRC

      #+RESULTS:
      : CAR h: text-pixels
      : CDR h: (42)
      : 
      : CAR w: text-pixels
      : CDR w: (92)

  - [ ] =LaTeX Code Within ~.Org~ Docs:= 

      #+begin_comment

      Code Embedded ~In-line~ within paragraphs:
      
         Put: @@latex:<LaTeX Code Here>@@ Anywhere
         Within a paragraph...

      #+LATEX: % Any Arbitrary LaTeX Code...
      
      #+LATEX: \newpage % Start New Page

      #+BEGIN_EXPORT latex
      %% Put LaTex Code In Here...
      #+END_EXPORT

      #+BEGIN_LaTeX
      %% Put LaTex Code In Here...
      #+END_LaTeX

      #+end_comment

:END:

New Item Details... Yadda... Yadda... Yadda...

Re-Purpose these as needed and Delete anything you don't need...

Add sub headings as needed...

***** NEW Item 2 /(placeholder)/ [0/3] 
<<JOURNAL_EXAMPLE-ENTRY-DETAILS_item-2>>
:BOILERPLATE: 

  =Delete This BOILERPLATE DRAWER If You Don't Need It...=

  The following list contains Babel Source Code Blocks that are
  often needed for something I am writing or "Logging" about...
  I use them so much I decided to include them in this template...

  - [ ] *__:* /(__)/

      #+begin_src conf
       keyword1:     Value1 
       keyword2:     Value2 
       keyword3:     Value 
      #+end_src

  - [ ] *__:* /(__)/

      #+begin_src bash
       sudo dnf install emacs
       sudo apt install emacs
      #+end_src

  - [ ] *__:* /(__)/

      #+BEGIN_SRC emacs-lisp :results output
       ;; Initialize Local Vars from GLOBAL CONSTANTS;
       (let ((h (list 'text-pixels ME--CODE-FRAME-HEIGHT))
             (w (list 'text-pixels ME--CODE-FRAME-WIDTH)))
         (princ "CAR h: ")
         (princ (car h))
         (princ "\n")
         (princ "CDR h: ")
         (princ (cdr h))
         (princ "\n\n")
         (princ "CAR w: ")
         (princ (car w))
         (princ "\n")
         (princ "CDR w: ")
         (princ (cdr w)))
      #+END_SRC

      #+RESULTS:
      : CAR h: text-pixels
      : CDR h: (42)
      : 
      : CAR w: text-pixels
      : CDR w: (92)

  - [ ] =LaTeX Code Within ~.Org~ Docs:= 

      #+begin_comment

      Code Embedded ~In-line~ within paragraphs:
      
         Put: @@latex:<LaTeX Code Here>@@ Anywhere
         Within a paragraph...

      #+LATEX: % Any Arbitrary LaTeX Code...
      
      #+LATEX: \newpage % Start New Page

      #+BEGIN_EXPORT latex
      %% Put LaTex Code In Here...
      #+END_EXPORT

      #+BEGIN_LaTeX
      %% Put LaTex Code In Here...
      #+END_LaTeX

      #+end_comment

:END:

New Item Details... Yadda... Yadda... Yadda...

Re-Purpose these as needed and Delete anything you don't need...

Add sub headings as needed...

***** NEW Item 3 /(placeholder)/ [0/3] 
<<JOURNAL_EXAMPLE-ENTRY-DETAILS_item-3>>
:BOILERPLATE: 

  =Delete This BOILERPLATE DRAWER If You Don't Need It...=

  The following list contains Babel Source Code Blocks that are
  often needed for something I am writing or "Logging" about...
  I use them so much I decided to include them in this template...

  - [ ] *__:* /(__)/ 

      #+begin_src conf 
       keyword1:     Value1 
       keyword2:     Value2 
       keyword3:     Value 
      #+end_src

  - [ ] *__:* /(__)/ 

      #+begin_src bash 
       sudo dnf install emacs
       sudo apt install emacs
      #+end_src

  - [ ] *__:* /(__)/ 

      #+BEGIN_SRC emacs-lisp :results output
       ;; Initialize Local Vars from GLOBAL CONSTANTS;
       (let ((h (list 'text-pixels ME--CODE-FRAME-HEIGHT))
             (w (list 'text-pixels ME--CODE-FRAME-WIDTH)))
         (princ "CAR h: ")
         (princ (car h))
         (princ "\n")
         (princ "CDR h: ")
         (princ (cdr h))
         (princ "\n\n")
         (princ "CAR w: ")
         (princ (car w))
         (princ "\n")
         (princ "CDR w: ")
         (princ (cdr w)))
      #+END_SRC

      #+RESULTS:
      : CAR h: text-pixels
      : CDR h: (42)
      : 
      : CAR w: text-pixels
      : CDR w: (92)

  - [ ] =LaTeX Code Within ~.Org~ Docs:= 

      #+begin_comment 

      Code Embedded ~In-line~ within paragraphs:
      
         Put: @@latex:<LaTeX Code Here>@@ Anywhere
         Within a paragraph...

      #+LATEX: % Any Arbitrary LaTeX Code...
      
      #+LATEX: \newpage % Start New Page

      #+BEGIN_EXPORT latex
      %% Put LaTex Code In Here...
      #+END_EXPORT

      #+BEGIN_LaTeX
      %% Put LaTex Code In Here...
      #+END_LaTeX

      #+end_comment

:END:

New Item Details... Yadda... Yadda... Yadda...

Re-Purpose these as needed and Delete anything you don't need...

Add sub headings as needed...
**** NEW 📚 Reference: 
<<-JOU_EXAMPLE-ENTRY_ref>>
:README: 
=Org Mode Links Tip:=

+ To Create a Link Type: ~C-c C-l~ /(then paste: ~link~ & type: "description")/ 
     =-OR-= Simply Copy/Paste BOILERPLATE: /(use placeholders below)/ And Fill Them In Manually... Copy/Paste more placeholders as needed to create more links...

+ To Open a Link Type: ~C-c C-o~ 

+ To EXPAND a Link Type: ~SPACE b~ or: ~M-x org-toggle-link-display~ 

- *Heading:* [[~/.GIT/My-Docs/][MY DOCS]] /(comment)/ 

- *Heading:* [[link][Link NAME] ] /(comment)/ 

- [[yt:aB1cD2eF3gH ][TITLE ] ] *Description:* /(YouTube)/ 

- [[link][Link Name] ] *Heading:* /(comment)/ 
   
- *_:* [[][] ] /(yadda... yadda... yadda...)/ 
:END:

- *Link to Project:* [[][] ] /(comment)/ 

** 📅 2026: 
<<-JOU_2026>> 

/Not Here Yet but keep logging... The New Year will be here soon enough!/

* ⎘ Meta: /(Usage & Templates)/                                  :noexport: 
<<META>>

** 📚 Meta Reference: 
<<META_ref>> 

Here are Links to Information that may help you utilize this template to create your logbooks in org-mode, as well as EXPORTING your Log Books to professionally typeset PDFs or To the WEB as a regular timestamped blog or as selected single pages on some other website or text snippets to Mastodon...

=Organized by Categories=

*** General Emacs: 

- [[https://emacsdocs.org/][Emacs Docs]] - /(Emacs Docs)/ 

  /The modern documentation website Emacs deserves./

*** Emacs Lisp: /(eLisp)/

- [[https://emacsdocs.org/docs/elisp/Emacs-Lisp][Emacs Lisp Manual ]] - /(Emacs Docs)/ 

  /This is the GNU Emacs Lisp Reference Manual corresponding to Emacs version 27.2/

- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][EMACS LISP MANUAL]] - /(GNU.org)/ 

  /This is the OFFICIAL GNU Emacs Lisp Reference Manual corresponding to Emacs version 30.1/

*** ORG-MODE: 

- [[https://emacsdocs.org/docs/org/The-Org-Manual][The Org Manual]]  - /(Emacs Docs)/ 

  /Emacs Docs Format - This manual is currently for Org version 9.4. Check Link Below to LATEST VERSION to see if it is up to date.../

- [[https://orgmode.org/manual][THE ORG MANUAL]] - /(Orgmode.org)/ 

  /OFFICIAL Orgmode.org Manual Latest Version/

- [[https://orgmode.org/worg/][Hello Worg, the Org-Mode Community!]] - /(WORG)/ 

  /Worg documentation & Org-Mode Resources.../

- [[https://orgmode.org/worg/dev/org-export-reference.html][Org Export Reference]] - /(WORG)/ 

  /This document is aimed at back-end developers for the generic export engine ox.el. It assumes a good understanding of Org syntax from the reader./

- [[https://orgmode.org/manual/In_002dbuffer-Settings.html][Summary of In-Buffer Settings]] - /The ORG Manual/ 

- [[https://orgmode.org/manual/Export-Settings.html#Export-Settings][Export Settings]] - /The ORG Manual/ 

- [[https://orgmode.org/manual/Embedded-LaTeX.html][12.5 Embedded LaTeX]] - /(The Org Manual)/ 

- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]] - /(Norang.ca Public Docs)/

*** Tools for ORG-MODE / LaTeX: 

- [[https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode][Literate Programming]] - /(Article by: by Justin Worthe)/ 

  /(Literate Programming - Empower Your Writing with Emacs Org-Mode)/

- [[https://www.ctan.org/pkg/latexmk/][latexmk - Fully Automated LaTeX Document Generation]] - /(CTAN)/ 

  /Latexmk completely automates the process of generating a LaTeX document. Given the source files for a document, latexmk issues the appropriate sequence of commands to generate a .dvi, .ps, .pdf or hardcopy version of the document./

- [[https://orgmode.org/manual/LaTeX-fragments.html][12.5.1 LaTeX fragments]] - /(The Org Manual)/

- [[https://emacsdocs.org/docs/org/Images-in-LaTeX-export#nil][Images in LaTeX export]] - /(Emacs Docs)/ 

  /placeholder Text.../

- [[https://ctan.org/pkg/nopageno][nopageno – No Page Numbers in LaTeX Documents]] - /(CTAN)/ 

  /CTAN Comprehensive TeX Archive Network.../

- [[https://www.miskatonic.org/2023/11/15/minted/][Export Org SRC Code Blocks to LaTeX w Minted]] - /(Miskatonic University Press)/ 

  When minted is one of the included packages for Org-Mode export, it’s always necessary to run ~pdflatex~ ~-shell-escape~ to compile the PDF, even if there are no source blocks... This article explains ways around that problem - /(code from Xah Lee)/

- [[https://tex.stackexchange.com/questions/22741/how-to-remove-header-on-a-certain-page][How to Remove Header on a Certain Page]] - /(Stackexchange)/ 

  /A Question/Answer on Stackexchange TeX Discussion Group.../

- [[Https://Github.Com/GeneKao/Orgmode-Latex-Templates][Org-Mode Starter Codes for Exporting to LaTeX PDF:]] - /(GeneKao@GitHub)/ 

  /This repo contains different templates for org-mode -> LaTeX and PDF. Along with the document templates... There are ALSO many great tips for formatting exotic figures and MATH.../ 

  /Created by:/ [[https://www.geneatcg.com/][GeneKao]] /- Gene Ting-Chun Kao - R&D Computational Geometry Processing Engineer at Ansys - Meshing Development Unit (MDU).../

- [[https://www.geneatcg.com/emacs-org-mode-export-to-pdf/][Emacs Org Mode export to pdf]] - /(Article by: Gene Ting-Chun Kao)/

=PIM & TAGGING:=

- [[https://www.gnu.org/software/emacs/manual/html_node/org/Tags.html][TAGS]] - /(GNU.org)/ 

  An excellent way to implement labels and contexts for cross-correlating information is to assign tags to headlines. Org mode has extensive support for tags...

- [[https://karl-voit.at/2022/01/29/How-to-Use-Tags/][How to Use Tags]] - /(Home Page of Karl Voit)/ 

  /(HOW and WHY they are IMPORTANT)/
  =Because EVERYTHING is MISCELLANEOUS in our minds=...

- [[https://github.com/harmonicalchemy/Memacs][Memacs]] - /(fork of Karl Voit's Repo: harmonicalchemy@GitHub)/ 

  Memacs extracts metadata /(subjects, timestamps, contact information, etc.)/ from many different existing data sources /(file names, emails, tweets, bookmarks, etc.)/ on your computer and generates files which are readable by GNU Emacs with Org-Mode...

=ORG-TABLES:=

- [[https://www.teachmaths.org/20250117_orgmode-tables/][Exporting Org Mode Tables to LaTeX]] - /(teachmaths.org)/ 

  The tables produced by Org mode are pretty basic by default. However, you can use the LaTeX *tabularray* package to customise the look of your tables. 

- [[https://emacs.stackexchange.com/questions/37550/preventing-org-mode-pdf-tables-from-running-off-the-page?noredirect=1&lq=1][Preventing Org-Mode PDF Tables from Running Off the Page]] - /(Stackexchange)/ 

  The answer to this question explains: ~longtable :align |p{3cm}|p{6cm}|l|l|l|l|l|l|~ /(etc.)/
  Where you replace any ~| l |~ /(column)/ with ~p{*cm}~ where ~*~ can be any numeral as required to fit table to page... /(i.e., hard wired column widths)/

- [[https://tex.stackexchange.com/questions/721496/wide-landscape-table-to-fit-page-margins?rq=1][Wide Landscape Table to Fit Page Margins]] - /(Stackexchange)/ 

  /A Question/Answer on Stackexchange TeX Discussion Group.../

=Blogging Tools:=

- [[https://orgmode.org/worg/org-blog-wiki.html][Blogs and Wikis with Org]] /(Blogging tools - with links to GitHub projects)/

- [[https://github.com/org2blog/org2blog?tab=readme-ov-file#make-your-first-post-in-less-5-minutes][org2blog - Publish to WordPress Blog]] -  /(Puneeth Chaganti @ Github)/ 

  /Org2Blog is SUPPOSEDLY the most advanced WordPress blog editor and manager available today.../

- [[https://github.com/novoid/lazyblorg][lazyblorg]] - /(novoid@GitHub - Karl Voit)/ 

  /Blogging with Org-mode for very lazy people/

*** AUCTeX: 

- [[https://emacsdocs.org/docs/auctex/Top][AUCTeX Manual ]] - /(Emacs Docs)/ 

  /This manual is for AUCTeX (version 12.3 from 2020-10-10), a sophisticated TeX environment for Emacs./

- [[https://elpa.gnu.org/packages/doc/auctex.html][OFFICIAL AUCTeX MANUAL]] - /(GNU.org)/ 

  /This is the LATEST Version of the OFFICIAL GNU AUCTeX Manual/

*** LaTeX: 

- [[https://tug.org/][TeX Users Group]] - /(TUG.org)/

- [[https://ctan.org/][Comprehensive TeX Archive Network]] - /(CTAN)/ 

- [[https://latex-tutorial.com/documentclass-latex/][Your Guide to documentclass LaTeX: Types and options]] - /LaTeX-Tutorial.com/

- [[https://www.ctan.org/pkg/memoir][The Memoir Document Class]] - /(CTAN Page)/ 

- [[https://mirror.math.princeton.edu/pub/CTAN/macros/latex/contrib/memoir/memman.pdf][The Memoir Class - Manual:]] - /(CTAN PDF)/

- [[https://www.linuxjournal.com/content/org-mode-latex-exporter-latex-non-texers][The org-mode LaTeX exporter]] - /(LaTeX for non-TEXers) LINUX Journal/

- [[https://tufte-latex.github.io/tufte-latex/][Tufte-LaTeX]] - /(Tufte LaTeX PAGE @GitHub.io)/ 

  /A Tufte-inspired LaTeX class for producing handouts, papers, and books... This site is home to LaTeX classes for producing handouts and books according to the style of Edward R. Tufte and Richard Feynman./

- [[https://github.com/Tufte-LaTeX/tufte-latex][tufte-latex CLASS]] - /(Tufte-Latex@GitHub)/ 

  /The GitHub Repo for the Tufte-inspired LaTeX Class.../

- [[https://damitr.org/2014/01/09/latex-tufte-class-in-org-mode/][Latex Tufte class in org-mode]] - /(Article on damitr.org)/ 

  Edward Tufte is known for graphical excellence in his famous books. Some enthusiasts combined his design principles into LaTeX and you have the tufte-book and tufte-handout classes for excellence in typesetting. This has support for side notes, margin figures, full width figures etc.

  The Instructions within this article are integrated with ORG-MODE to produce results...

*** LaTeX Fonts: 

- [[https://tug.org/FontCatalogue/][The LaTeX Font Catalogue]] - /(TUG.org)/

- [[https://tug.org/FontCatalogue/seriffonts.html][Serif Fonts]] - /(TUG.org)/ 

- [[https://tug.org/FontCatalogue/sansseriffonts.html][Sans Serif Fonts]] - /(TUG.org)/ 

- [[https://tug.org/FontCatalogue/typewriterfonts.html][Typewriter Fonts]] - /(TUG.org)/ 

- [[https://tug.org/FontCatalogue/calligraphicalfonts.html][Calligraphical Fonts]] - /(TUG.org)/

- [[https://en.wikibooks.org/wiki/LaTeX/Fonts][LaTeX Fonts]] - /(WIKIbooks.org)/

*** LaTeX Music Related Software: 

- [[https://www-cs-faculty.stanford.edu/~knuth/organ.html][Donald Knuth's Pipe Organ]] - /(Stanford.edu)/ 

  =The Organ of Don and Jill Knuth= - This sixteen-rank organ was designed and built for our home by Abbott and Sieker of Los Angeles, California, as their “Opus 67.” It has 812 pipes, separated into three divisions...

- [[https://icking-music-archive.org/][Werner Icking Music Archive]] - /(WIMA)/

- [[https://icking-music-archive.org/software/htdocs/index.html][MusiXTeX and Related Software]] - /(WIMA)/

- [[https://ctan.org/pkg/musixtex][MusiXTeX – Sophisticated Music Typesetting]] -  /(CTAN)/

- [[https://tug.ctan.org/info/latex4musicians/latex4musicians.pdf][LaTeX for Musicians by Guido Gonzato, PhD]] - /(CTAN - PDF)/ 

  This guide shows how to create LaTeX documents that include several kinds of music elements, from very simple to quite complex. Music features may consist of music symbols, song lyrics, guitar chords diagrams, lead sheets, music excerpts, guitar tablatures, multi-page scores.

** 📄 Introduction: 
<<META_intro>>

Use this template as a quick way to make time-stamped notes in chronological order /(like a Diary)/ There is NO Time Tracking... You simply put timestamps under the headings of your notes and organize them chronologically under *YYYY* Headings...

This is good for logging things that may or may not be part of a Larger Project, /(or possibly smaller "yak shaving" tasks that you don't want cluttering up your Larger Project's Time Tracking Log with)/.

This *Simple Date Only Journal SKELETON* is not intended to be exported to PDF and/or published except as HTML on GitHub etc....  However, unlike other HAP Templates, this LIGHT DUTY Template is mostly ONLY for internal *Emacs Org-Mode* use...

#+begin_quote 
/“Everyone is a moon,/
 /and has a dark side,/
 /which he never shows to anybody.”/ - Mark Twain 
#+end_quote 

*** Emacs Shorthand Command Key Notation: 

The command key conventions used in the instructions below, /(as well as all *Harmonic Alchemy Productions* docs)/, follow *Standard Emacs* command key naming conventions.

Official GNU Emacs documentation uses a shorthand notation to indicate the *Ctrl* key as an upper case *C-* (/with minus appended/). Upper case *M-* (/with minus appended/) is the shorthand notation for the Emacs *META* key...

If you are on Linux, BSD, or other machine there are OTHER Options on how to map your keys for the least stress on your fingers etc...  Now that I have an EXPENSIVE MacBook Pro I kind of gave up spending time building unix machines for office work... For me all my UNIX work is NOW only done on self hosted VPS running in data centers... (I got EMACS running on those configurations as well... and my Mac at home is my keyboard so NO Problems Messing with nx key mapping woes!

IF YOU NEED HELP on a LINUX box mapping your keys... /(lol GOOD LUCK)/... You can visit [[http://xahlee.info/kbd/linux_vs_windows_vs_mac_best_keybinding.html][Xah Lee's Linux vs Mac vs Windows Blog Post]] as well as: [[http://xahlee.info/kbd/keyboard_blog.html][Xah Lee's Keyboard Blog]] for great help with Keyboards to use /(focusing on Linux but urging you to use a Mac)/

*** Important Note For Mac Users: 

For the BEST experience using *HAP Modular Emacs* On MacOS, you need to install a Keyboard Mapping App called *Karabiner-Elements* [[https://karabiner-elements.pqrs.org/][LINK to Download]]

=THEN MAP YOUR KEYS as FOLLOWS:=

~CAPS-LOCK~ ➔ ~HOME~

     /(You WILL NEED THIS if you want to make your *xah-fly-keys* experience a FLYING one rather than a TRIPPING and CRASHING one)... LOL/ 

~F6~ ➔ ~CAPS-LOCK~ 

     /(You don't really need to use this much as there is another key "~\~" assigned via *xah-fly-keys* that can do some fancy upper/lower case flipping of words, paragraphs, etc... Try it... you will see %^)/

In addition *xah-fly-keys* makes the following Emacs Configurations:
     
=Control Key:=    ~C-~ ➔ ~⌘~ /(Apple Command Key)/

=META Key:=           ~M-~ ➔ ~⌥~ /(Apple Option key)/

=Apple Ctrl Key:= ~⌃~ ➔ Still Works as standard Control Key /(emacs, other apps, console, etc.)/

=ALSO:= For ALL machines using *xah-fly-keys* config, typing the "~a~" key invokes the Emacs ~M-x~ Key Chord directly... allowing you to immediately type and execute an emacs command from a single key alone right under your left little finger!

With *Karabiner-Elements* [[https://karabiner-elements.pqrs.org/][LINK to Download]] Installed and configured properly as above, AND you are using *HAP Modular Emacs* configured to use *XAH-FLY-KEYS*, =Keep the Following in Mind:=

While following instructions from standard vanilla Emacs docs, NOTE that your ~Ctrl~ , ~META~ and ~CAPS-LOCK~ keys are not /"standard"/ anymore and you must make a mental translation to the keys you have reassigned... /(you will get used to it soon enough)/ It has been designed /(after YEARS of research by Xah Lee)/ to Protect your fingers and fine motor muscles...

Beyond that, you will be fine following other emacs tutorials etc.  Hey... you Mac enthusiasts are used to that kind of /"being different"/ stuff anyway, right? Being one of /"the rest of us"/ that is... What the heck does that mean anyway? LOL

The above key assignments were done to get the *Emacs C-* key closer to the space bar where it can be activated with your left thumb instead of contorting to get at it with your pinkie finger. This makes using *Xah Fly Keys* even easier to use and less stressful on your fingers...

In the Official Emacs documentation you will commonly find key command notations such as *C-x* or *M-x*... This means: Hold the *Ctrl* /(or *META*)/ key down while typing the *x* key.  

Any time you see this notation, regardless of what key may be connected to it with a dash /(e.g., *C-c*, *M-5*, etc.)/, this means to hold the *Ctrl*-or-*META* key down while you press the other key connected to it with the dash... If you have a command that includes many *C-key* or *M-key* commands in succession simply hold the *Ctrl*-or-*META* key down the entire time you type the other keys and then let go...

If you see other keys alone separated by a space after the *C-x* or *M-x* /(e.g., C-x *d*, M-x *b*, etc.)/ this means to type that key /AFTER/ letting go of the *Ctrl*-or-*META* key...

*Got that?* That's the key notation system we use here... It is all standard Emacs...  The above paragraphs are mostly for the benefit of new Emacs users! And there is more to learn below. If you are an Emacs/Org-Mode veteran please bear with us...

For *HELP* using *Xah-Fly-Keys* with *HAP Modular Emacs* [[][VISIT THIS DOC] ] =TBD= later...

*** Org Mode Timestamps: 

This Template utilizes the default *Org-Mode:* "~C-c .~" Command to set a timestamp ANYWHERE within this document. This Enters a normal timestamp at the cursor position.

=NOTE:= /There is NO Clock Table feature within this doc like there are in other LOG Templates.../

** ❔ HowTo: 
<<META_howto>>

=NOTE:= Additional HELP/Commands for using *Org-Mode* with Modular Emacs will be explained here if needed, as well as other *Harmonic Alchemy Modular Emacs Templates* that get produced in the future...

*** Create a New Journal Entry: [0/1] 
<<META-HOWTO_clone-new-journal-entry>>

- [ ] *RESET all Check Boxes UNDER These Headings:* 

  Do this FIRST before following any of the tasks... This is to help you get your workflow down...

  Later once you got all this in muscle memory you can forget wasting your time here...

  /(this is for beginners - HOPE IT HELPS)/

=Note:= If this is your first time using this log book, don't bother to COPY/CLONE  *🗓 BOILERPLATE Journal Entry:* /(i.e., SKIP the Sub Step below this heading).../ ALSO skip *Paste Cloned JOURNAL Entry:* heading below that...

=INSTEAD=... Find the placeholder Log Entry: *🗓 EXAMPLE Journal Entry* /(Cloned from TEMPLATES)/ ALREADY in place for you to use under the CURRENT: *📅 YYYY:* binder within the *📒 JOURNAL:* binder... /(initially put there as an example)/

The *Edit-Compose New JOURNAL Entry:* Instructions below are the SAME Regardless, so follow those instructions for ALL cases...

=NOTE:= You May have to UPDATE the *📅 YYYY:* heading to your actual CURRENT Year if you have NOT pulled the Latest Changes from the git repo... /(shame on you for waiting so long)/

**** Copy/Clone: *NEW 🗓 BOILERPLATE Journal Entry* [0/2] 
/(JOURNAL Entry TEMPLATE)/ from *⎘ Templates* Binder

- [ ] *SELECT the ENTIRE heading & ALL its Contents:* 

  Use normal Emacs selection methods. i.e., Type ~t~ key to set the mark for selection, /(xah-fly-keys Command/ /Mode)/ or use ~C-SPACE~ /(normal Emacs)/, and move the point to get the entire heading, and all of its contents, but NOTHING else... =and copy it...=

  =Note:= Before Copying Selected Text, ensure your cursor is at the end of it BUT not be part of any items after it... Placing your cursor on the first column of the next line will include the invisible new-line character which is what you want, but any text directly under the cursor on the next line will not be copied...  Later, after pasting this text somewhere else, your cursor will end up sitting on the first column of a blank line under the pasted text. /(exactly as intended)/ 

- [ ] *Complete the Copy Operation:* 

  *Type*: ~c~ /(xah-fly-keys Command Mode)/

  This will save the selection for pasting later, /(the highlighted/ /text will go back to normal)/... You should have gotten only the Single LOG Entry with ALL its contents, BUT nothing else below it...

  =Note:= If you type: "~spacebar t~" /(xah-fly-keys leader key command),/ it will show you the contents of your paste buffer...  You can see the LAST item you copied in there AT THE TOP... To get out of the paste buffer view, *Type:* "~spacebar u~" and it will return you to where you were before...
  
*** Place Your Cloned JOURNAL Entry: [/] 
<<META-HOWTO_place-cloned-journal-entry>>

- [ ] *RESET all Check Boxes UNDER These Headings:* 

  Do this FIRST before following any of the tasks... This is to help you get your workflow down...

  Later once you got all this in muscle memory you can forget wasting your time here...

  /(this is for beginners - HOPE IT HELPS)/

**** PASTE: *🗓 BOILERPLATE Journal Entry:* [0/2] 
/(JOURNAL Entry TEMPLATE)/ From the PASTE BUFFER...

- [ ] *Advance Cursor:* 

  Advance your cursor to a blank line just below the LAST Most Recent LOG entry under the CURRENT *📅 YYYY:* heading within the *📒 JOURNAL:* binder, and press *enter* a couple times to get your cursor on a fresh clean line with some extra space above and below it... /(Below any previously time stamped entries you may already/ /have placed)/... 

- [ ] *Press:* ~v~ *To PASTE your cloned Log Entry:* 

  *Press:* ~v~ /(xah-fly-keys Command Mode)/ to paste your cloned Log Entry template...

  If you find out that what you copied also included some unwanted text directly below it, no problems... Just delete that part now...

  =Note:= If you accidentally copied one or more previously invisible bullets to column one on a blank line they will create an invisible "ghost" heading that you will now need to delete...

  You will know this if you see an org-ellipsis "⤵" symbol on a line by itself indicating a heading but no text... Simply delete that whole line and it will go away... Now you are ready to compose your new log entry... 

*** Edit-Compose New JOURNAL Entry: 
<<META-HOWTO_compose-new-journal-entry>>

Instructions for EDITING a NEW or REPURPOSED BOILERPLATE Journal Entry:

- [ ] *RESET all Check Boxes UNDER This Heading:* 

  Do this FIRST before following any of the tasks... This is to help you get your workflow down...

  Later once you got all this in muscle memory you can forget wasting your time here...

  /(this is for beginners - HOPE IT HELPS)/

- [ ] *Place Cursor Directly on the Existing Timestamp:* 

  Place your cursor directly on the existing timestamp directly under your CLONED or REPURPOSED *🗓 BOILERPLATE Journal Entry:* heading and enter the key binding: ~C-c .~ /(i.e., press/ ~Ctrl~ /key while holding/ ~c~ /and then type a dot ~.~ /)/ A date chooser panel will pop up... 

- [ ] *Type one more dot:* 

  Type one more dot ~.~ to force the calendar selection to the current time and date and then, Press ~ENTER~ to accept your choice... /This will update the existing older timestamp with/ /the current date/time.../

  Check to make sure the timestamp was properly updated then move on to the next step...

  This timestamp will not be updated after that, Just as in a Diary Page...  You will most likely create one Journal entry per day Timestamped to that day only...

  =NOTE:= /This is the ONLY Time Tracking Feature of this Journal.../

  =NOTE:= You could place *Month* Headings under the *📅 YYYY:* headings for better chronological organization... 

- [ ] *You Are Now Ready To Start Writing:* 

  You are ready to start making entries within your New Journal Entry... Your timestamp indicates the present, /-and-/ you are all set to begin writing a SIMPLE Note if that's all you need to do..

  Simply REPLACE all the SUB Headings and BOILERPLATE content with YOUR SIMPLE Note of a few paragraphs etc...

*** OPTIONAL Journal Entry Details: 
<<META-HOWTO_optional-journal-entry-details>>

You could /(if you wish)/ get fancy and utilize the sub-headings for your Journal Entry...
These Steps outline that process...

- [ ] *Follow the* ~:HOW-TO-USE-THIS:~ *Directions:* 

  OPEN the ~:HOW-TO-USE-THIS:~ Drawer under the *🗓 BOILERPLATE Journal Entry* /(JOURNAL Entry TEMPLATE)/ ITSELF and READ those Instructions... These steps show you MORE DETAILS about how to commandeer your CLONE /(from Start to finish)/, change headings, ANCHORS, etc...

  Three sub headings have been provided under the 📒 *Details*: Heading for your use /(if you need them)/.

  However, you may structure your journal entries any way you wish, and/or REPLACE/MODIFY the entire 📒 *Details:* section alltogether to simply write a short Journal Entry /(which may turn out to be the usual case)/...

  Conversely, the 📒 *Details:* heading could contain a complete thorough journal of some complex idea... Who Knows?  [[https://youtu.be/upJ3OgMRiUA?si=v-5Ou_mnlYlRq5N0]["What A Difference A Day Makes"]] - Dinah Washington 

** ⎘ Templates: 
<<META_templates>>
*** NEW 🗓 BOILERPLATE Journal Entry /(JOURNAL Entry TEMPLATE)/ 
<2021-03-29 Mon>  
<<-JOU_boilerplate-entry>>
:HOW-TO-USE-THIS: 
=COMMANDEERING CLONES of this BOILERPLATE JOURNAL Entry TEMPLATE:= 

- [ ] *COMMANDEER Your New CLONE:* 

  The structure of this Journal Entry Template's content layout is all set up for you ahead of time to allow you to immediately begin writing... /(You only need to change titles etc...)/ 

  After cloning, =RENAME= *BOILERPLATE JOURNAL Entry* /(JOURNAL Entry TEMPLATE)/ to a *Unique Title* in order to commandeer the journal entry item for your own needs... 

  =Do NOT PUT "JOURNAL" in your Title!= /(not needed as you already know this is a Journal)/

- [ ] *UPDATE MAIN Timestamp to TODAY:* 

  Place your cursor directly on the existing timestamp directly under the title of THIS CLONED or REPURPOSED *🗓 BOILERPLATE Journal Entry:* and enter the key binding: ~C-c .~ /(i.e., press/ ~Ctrl~ /key while holding/ ~c~ /and then type a dot ~.~ /)/ A date chooser panel will pop up... 

- [ ] *Type One More DOT:* 

  Type one more dot ~.~ to force the calendar selection to the current time and date and then, Press ~ENTER~ to accept your choice... /This will update the existing BOILERPLATE timestamp with TODAY's date/time.../

  Check to make sure the timestamp was properly updated then move on to the next step...

  This timestamp will not be updated after that, /(Just as in a Diary Page)/...  You will most likely create one Journal entry per day, Timestamped to that day only...

  =NOTE:= /This is the ONLY Time Tracking Feature of this Journal.../

  =NOTE:= It may be a good idea to place *Month* Headings under the *📅 YYYY:* headings for better chronological organization...

=NOTE:= You May or May not wish to set additional ~<timestamps>~ under sub headings appearing under the *📒 Details:* section... =ALSO:= for most Daily Journal Entries you may have only a few things to say and therefore do away with ALL Sub Headings below the Details Section entirely or even the Details Heading altogether...

=Adjusting ANCHORS to make them UNIQUE:=

=NOTE:= All of this work in the beginning will help keep your anchors unique, and also add an extra *KM* dimension of *category* to them automagically...

Your unique anchors may be used to link to this Journal Entry from other Journal Entries, and quite possibly unique enough to reach it from external org docs referencing the single anchor alone from an org link... /(I have not really tested reaching the anchors from external docs... YMMV, but you can always add a qualified path before that anchor and it will work from external org docs fine that way)/

It would be wise to follow this convention when you create anchors elsewhere within ALL of your Writing Projects created from HAP Modular Emacs Document Skeleton Template files...

If you wish to change any of this, go ahead and do what ever you want... For simplicity's sake, follow the instructions below... There are ways to use :PROPERTY: directives to get your links GLOBAL as well... I prefer to do it manually... The alternate is a mess IMHO... I don't have time to spend on this mess... What I have currently works nice and simple for me... Probably you too... /(trust me I have tried EVERYTHING)/ lol

After completing the initial CLONING steps above the next thing to do is adjust all ANCHORS contained within your CLONE to match changed titles, etc... /(read HAP ORG-MODE ANCHOR CONVENTIONS first)/

- =HAP ORG-MODE ANCHOR CONVENTIONS:= 

  The ANCHORS /(below the headings)/ MUST BE UNIQUE!

  I created the *Following Convention* for making unique mnemonic anchors within ALL of these ~HAP_Doc-Skeleton.org~ Template files...

  For *MAIN HEADINGS* it looks like this: ~PREFIX_label~...

  For *SUB HEADINGS* it looks like this: ~PREFIX_LABEL_postfix~

  For *SUB-SUB HEADINGS* it might like this: ~PREFIX_LABEL_LABEL_postfix~ /(etc...and probably unnecessary overkill as well - but if you need one... This is how you should do it to reflect extension of the schema above it)/

  The ANCHOR ~PREFIX~ for *JOURNAL* FILES /(i.e., this document)/ is ~-JOU~

  The ~PREFIX~ is there to show this anchor belongs to a Simple *Date-ONLY Journal* file. It starts with a dash "-" character, which is intended to be connected to a unique mnemonic you will be adding to nail down WHICH Journal? /For example:/ ~MY-JOU_~  , ~AUTO-JOU_~ /etc.../ Other *HAP_Doc-Skeleton.org* Template files will have a different PREFIX to identify the document class they belong to...

  The ~_label~ portion of the ANCHOR is a shortened lower case version of the: *🗓 BOILERPLATE Journal Entry* TITLE...

  The ~_postfix~ portion is NOT USED in the *MAIN Headings*... It is only present under *SUB-HEADINGS* as it is the shortened lower case version of the *sub-heading title*...

  =NOTE:= The ~_label~ portion of the MAIN Heading ANCHOR will change to UPPER CASE ~_LABEL_~  when it is an ANCHOR for a sub heading...

  You also need to insure your anchors /(below the headings)/ are unique! 

- [ ] *Change The 🗓 Journal Entry MAIN ANCHOR:* /<<-JOU_boilerplate-entry>>/

  USE the Above =HAP ORG-MODE ANCHOR CONVENTIONS= to Change the MAIN ANCHOR directly under the *Journal Entry's Main Title* /(heading)/ to match your NEW *Journal Entry's Title*... /(No sub-titles will be POSTFIX here)/ 

  Leave ~-JOU_~ as the ANCHOR's PREFIX /(as in the boilerplate ANCHOR above)/ and ADD your UNIQUE ID for this Journal to the front of the prefix: e.g,. ~AUTO-JOU_~ ,  ~MY-JOU_~ etc...

  Change ~_boilerplate-entry~ i.e., the ~_label~ portion of the ANCHOR, to a short but unique abbreviation, acronym, or mnemonic of the Journal Entry's *NEW Title*... /(don't make it too cryptic to the point that you can no longer cognitively connect your mnemonic with the actual title)/ but keep it short and simple as possible...

  Keep the underscore that separates the ~-PREFIX_~ of this ANCHOR from the renamed ~_label~ portion of this NEW *Journal Entry*... Make this title portion of the ANCHOR all lower case... Use dashes to connect words within your title portion of  the ANCHOR...

  =NOTE:= for the BOILERPLATE Headings: i.e., *📒 Details:* , and *📚 Reference:* the ~_label~ portion of the ANCHOR is UPPER CASE... /(by design to show parent label relationships)/ 

  This =MAIN ANCHOR= does NOT contain a ~_postfix~ as it belongs to the *TOP Parent Heading*... The rest of the ANCHORS within this Journal WILL contain a ~_postfix~ mnemonic... /(all in lower case)/

  You will need to follow this exact convention for any new *Headings* or *SUB Headings* you will be creating...

  You may LINK to this Unique ANCHOR from other sections of this journal... /(Or even from/ ~.org~ /docs OUTSIDE of this file...)/

- [ ] *Change the 📒 Details: ANCHOR:* /<<-JOU_BOILERPLATE-ENTRY_details>>/ 

  For the *Details:* ANCHOR, you need to change the ~-PREFIX_~ and ~_LABEL~ portions, but leave the ~_postfix~ portion alone as you won't change this Heading's Name...

  ADD your unique mnemonic to the front of the ~-PREFIX_~ as described in: *Change The MAIN Journal Entry ANCHOR* above...

  =NOTE:= ~_LABEL~ is UPPER CASE here as this is a *Sub-Heading* of the *MAIN Journal Entry*...

  COPY the lower-case  ~_label~ portion from the ANCHOR under the *MAIN Journal Entry* and use that to rename "BOILERPLATE-ENTRY" within the *📒 Details:* ANCHOR... CHANGE it to UPPER CASE as well, to comply with HAP Org-Mode ANCHOR Conventions...

  *Leave the* ~_postfix~ *Portion ALONE* because the Details Heading does not change... 

- [ ] *Change the 📚 Reference: ANCHOR:* /<<-JOU_BOILERPLATE-ENTRY_ref>>/ 

  For the *Reference:* ANCHOR, you need to change the ~-PREFIX_~ and ~_LABEL~ portions, but leave the ~_postfix~ portion alone as you won't change this Heading's Name...

  ADD your unique mnemonic to the front of the ~-PREFIX_~ as described in: *Change The MAIN Journal Entry ANCHOR* above...

  =NOTE:= ~_LABEL~ is UPPER CASE here as this is a *Sub-Heading* of the *MAIN Journal Entry*...

  COPY the lower-case  ~_label~ portion from the ANCHOR under your Cloned *🗓 BOILERPLATE Journal Entry* /(heading)/ and use that to rename "BOILERPLATE-ENTRY" within the *📚 Reference:* ANCHOR... CHANGE it to UPPER CASE as well, to comply with HAP Org-Mode ANCHOR Conventions...

  *Leave the* ~_postfix~ *Portion ALONE* because the Reference Heading does not change... 

- [ ] *Change ANCHORS of Sub Headings:* /<<-JOU_PARENT-HEADING_prefix>>/ 

  In the case of Sub Headings, you will need to =CHANGE the ENTIRE ANCHOR=, Keeping the text's CASE intact, while changing the text of the PREFIX, LABEL, and postfix...

  If you need to make a NEW Sub-Heading Copy an existing Sub-Heading /(a sibling of the place where you want to make a new sub-heading)/ and modify that ANCHOR in the same way as above...

  If you decide to Create a *New Sub-Heading* =FROM SCRATCH= or suddenly find you have no siblings to CLONE, make your NEW ANCHOR look like this:

  ~PREFIX_LABEL_postfix~ where ~PREFIX~ is pretty much the same for all the ANCHORS, ~LABEL~ is the title of the *Parent Heading*, and ~postfix~ is the title of this *sub-heading*... /(all mnemonics)/ 

  COPY the UPPER-CASE ~_LABEL~ mnemonic from the ANCHOR under the Parent of this *Sub-Heading* and place that =AS IS= AFTER the ~PREFIX~ separated by an underscore character... 

  Create a ~_postfix~ mnemonic representing the *sub-heading* title and place that after the ~_LABEL~ mnemonic separated by an underscore character...

=NOTE:= You will be doing these operations a lot, making sure the CASE shifting of parent heading mnemonics are done correctly etc... /(Soon enough... you will have figured out the pattern, and it will become second nature for you... I hope)/

- [ ] *You Are Ready To Start Writing NOW:* 

  You are ready to start making entries within your *New Journal Entry*... Your timestamp indicates the present, /-and-/ you are all set to begin writing!

=ENJOY USING YOUR BRAND NEW JOURNAL OF ANYTHING YOU WANT!=
:END: 

This section SERVES as your  =SUMMARY= for the =DETAILS= Section below... Unlike ~HAP_Simple-Log-Book-Skeleton.org~, This Date Only version does not add an independent SUMMARY section...  You can of course override that if you wish... /(but maybe you are using the WRONG Template? If you want a MORE FORMALIZED Summary?)/

=REPLACE ALL THIS HERE with your REAL Journal Entry SUMMARY=...

/(i.e., This Journal Entry is about: Yadda... Yadda... Yadda...)/ 

**** NEW 📒 Details: 
<<-JOU_BOILERPLATE-ENTRY_details>>
***** NEW Item 1 /(placeholder)/ [0/3] 
<<-JOU_BOILERPLATE-ENTRY-DETAILS_item-1>>
:BOILERPLATE: 

  =Delete This BOILERPLATE DRAWER If You Don't Need It...=

  The following list contains Babel Source Code Blocks that are
  often needed for something I am writing or "Logging" about...
  I use them so much I decided to include them in this template...

  - [ ] *__:* /(__)/

      #+begin_src conf
       keyword1:     Value1 
       keyword2:     Value2 
       keyword3:     Value 
      #+end_src

  - [ ] *__:* /(__)/

      #+begin_src bash
       sudo dnf install emacs
       sudo apt install emacs
      #+end_src

  - [ ] *__:* /(__)/

      #+BEGIN_SRC emacs-lisp :results output
       ;; Initialize Local Vars from GLOBAL CONSTANTS;
       (let ((h (list 'text-pixels ME--CODE-FRAME-HEIGHT))
             (w (list 'text-pixels ME--CODE-FRAME-WIDTH)))
         (princ "CAR h: ")
         (princ (car h))
         (princ "\n")
         (princ "CDR h: ")
         (princ (cdr h))
         (princ "\n\n")
         (princ "CAR w: ")
         (princ (car w))
         (princ "\n")
         (princ "CDR w: ")
         (princ (cdr w)))
      #+END_SRC

      #+RESULTS:
      : CAR h: text-pixels
      : CDR h: (42)
      : 
      : CAR w: text-pixels
      : CDR w: (92)

  - [ ] =LaTeX Code Within ~.Org~ Docs:=

      #+begin_comment

      Code Embedded ~In-line~ within paragraphs:
      
         Put: @@latex:<LaTeX Code Here>@@ Anywhere
         Within a paragraph...

      #+LATEX: % Any Arbitrary LaTeX Code...
      
      #+LATEX: \newpage % Start New Page

      #+BEGIN_EXPORT latex
      %% Put LaTex Code In Here...
      #+END_EXPORT

      #+BEGIN_LaTeX
      %% Put LaTex Code In Here...
      #+END_LaTeX

      #+end_comment

:END:

New Item Details... Yadda... Yadda... Yadda...

Re-Purpose these as needed and Delete anything you don't need...

Add sub headings as needed...

***** NEW Item 2 /(placeholder)/ [0/3] 
<<-JOU_BOILERPLATE-ENTRY-DETAILS_item-2>>
:BOILERPLATE: 

  =Delete This BOILERPLATE DRAWER If You Don't Need It...=

  The following list contains Babel Source Code Blocks that are
  often needed for something I am writing or "Logging" about...
  I use them so much I decided to include them in this template...

  - [ ] *__:* /(__)/

      #+begin_src conf
       keyword1:     Value1 
       keyword2:     Value2 
       keyword3:     Value 
      #+end_src

  - [ ] *__:* /(__)/

      #+begin_src bash
       sudo dnf install emacs
       sudo apt install emacs
      #+end_src

  - [ ] *__:* /(__)/

      #+BEGIN_SRC emacs-lisp :results output
       ;; Initialize Local Vars from GLOBAL CONSTANTS;
       (let ((h (list 'text-pixels ME--CODE-FRAME-HEIGHT))
             (w (list 'text-pixels ME--CODE-FRAME-WIDTH)))
         (princ "CAR h: ")
         (princ (car h))
         (princ "\n")
         (princ "CDR h: ")
         (princ (cdr h))
         (princ "\n\n")
         (princ "CAR w: ")
         (princ (car w))
         (princ "\n")
         (princ "CDR w: ")
         (princ (cdr w)))
      #+END_SRC

      #+RESULTS:
      : CAR h: text-pixels
      : CDR h: (42)
      : 
      : CAR w: text-pixels
      : CDR w: (92)

  - [ ] =LaTeX Code Within ~.Org~ Docs:=

      #+begin_comment

      Code Embedded ~In-line~ within paragraphs:
      
         Put: @@latex:<LaTeX Code Here>@@ Anywhere
         Within a paragraph...

      #+LATEX: % Any Arbitrary LaTeX Code...
      
      #+LATEX: \newpage % Start New Page

      #+BEGIN_EXPORT latex
      %% Put LaTex Code In Here...
      #+END_EXPORT

      #+BEGIN_LaTeX
      %% Put LaTex Code In Here...
      #+END_LaTeX

      #+end_comment

:END:

New Item Details... Yadda... Yadda... Yadda...

Re-Purpose these as needed and Delete anything you don't need...

Add sub headings as needed...

***** NEW Item 3 /(placeholder)/ [0/3] 
<<-JOU_BOILERPLATE-ENTRY-DETAILS_item-3>>
:BOILERPLATE: 

  =Delete This BOILERPLATE DRAWER If You Don't Need It...=

  The following list contains Babel Source Code Blocks that are
  often needed for something I am writing or "Logging" about...
  I use them so much I decided to include them in this template...

  - [ ] *__:* /(__)/ 

      #+begin_src conf 
       keyword1:     Value1 
       keyword2:     Value2 
       keyword3:     Value 
      #+end_src

  - [ ] *__:* /(__)/ 

      #+begin_src bash 
       sudo dnf install emacs
       sudo apt install emacs
      #+end_src

  - [ ] *__:* /(__)/ 

      #+BEGIN_SRC emacs-lisp :results output
       ;; Initialize Local Vars from GLOBAL CONSTANTS;
       (let ((h (list 'text-pixels ME--CODE-FRAME-HEIGHT))
             (w (list 'text-pixels ME--CODE-FRAME-WIDTH)))
         (princ "CAR h: ")
         (princ (car h))
         (princ "\n")
         (princ "CDR h: ")
         (princ (cdr h))
         (princ "\n\n")
         (princ "CAR w: ")
         (princ (car w))
         (princ "\n")
         (princ "CDR w: ")
         (princ (cdr w)))
      #+END_SRC

      #+RESULTS:
      : CAR h: text-pixels
      : CDR h: (42)
      : 
      : CAR w: text-pixels
      : CDR w: (92)

  - [ ] =LaTeX Code Within ~.Org~ Docs:= 

      #+begin_comment 

      Code Embedded ~In-line~ within paragraphs:
      
         Put: @@latex:<LaTeX Code Here>@@ Anywhere
         Within a paragraph...

      #+LATEX: % Any Arbitrary LaTeX Code...
      
      #+LATEX: \newpage % Start New Page

      #+BEGIN_EXPORT latex
      %% Put LaTex Code In Here...
      #+END_EXPORT

      #+BEGIN_LaTeX
      %% Put LaTex Code In Here...
      #+END_LaTeX

      #+end_comment

:END:

New Item Details... Yadda... Yadda... Yadda...

Re-Purpose these as needed and Delete anything you don't need...

Add sub headings as needed...

**** NEW 📚 Reference: 
<<-JOU_BOILERPLATE-ENTRY_ref>>
:README: 
=Org Mode Links Tip:=

+ To Create a Link Type: ~C-c C-l~ /(then paste: ~link~ & type: "description")/ 
     =-OR-= Simply Copy/Paste BOILERPLATE: /(use placeholders below)/ And Fill Them In Manually... Copy/Paste more placeholders as needed to create more links...

+ To Open a Link Type: ~C-c C-o~ 

+ To EXPAND a Link Type: ~SPACE b~ or: ~M-x org-toggle-link-display~ 

- *Heading:* [[~/.GIT/My-Docs/][MY DOCS]] /(comment)/ 

- *Heading:* [[link][Link NAME] ] /(comment)/ 

- [[yt:aB1cD2eF3gH ][TITLE ] ] *Description:* /(YouTube)/ 

- [[link][Link Name] ] *Heading:* /(comment)/ 
   
- *_:* [[][] ] /(yadda... yadda... yadda...)/ 
:END:

- *Link to Project:* [[][] ] /(comment)/

*** COPY-PASTE ITEMS: 

- =INLINE IMAGES:= 
  Use this to place an image centered on the page when rendered on the Web...
  
  The image will not Auto Expand in org-mode, -and- if it becomes Visible, you can easily turn it OFF if you don't want it. (i.e. to save vertical space while editing)...

  *Type:* ~C-c~  ~C-x~ ~C-v~ to toggle visibility... 
  #+NAME: Figure:-LOG_object-name 
  #+ATTR_ORG: :align left
  #+ATTR_HTML: :align center
  #+ATTR_HTML: :width 600px
  #+CAPTION: This is The Caption for a table, graph, image, or etc...
    [[./media/svg/monochord.svg]]

- =TABLES:= 

  Lets See how VERSE blocks effect HTML output... I normally use CENTERED blocks...

  #+NAME: table:-LOG_table-name
  #+CAPTION: Org-Mode BOILERPLATE Table
  #+begin_verse 
|------+-------+-------|
| *COL-1* | *COL-2* | *COL-3* |
|------+-------+-------|
|   42 | foo    | bar    |
|    13 | fee    | fum   |
|------+-------+-------|
  #+end_verse

- =Generate TABLE from SRC CODE Block:= 

  =NOTE:= You must have iTerm running for this zsh command to work... I have not tried this with BASH, but I like the output table here so that is fine...

  Use this to generate a raw org-mode table for some data you need via a script, SHELL, Python, whatever... Then once the table is made you can copy it, fix up headings etc., add a NAME: and CAPTION: to it and place it where you need it... /(I should make capture templates or ya-snippets for this stuff but NOT YET)/.. First do it manually, then automate... 

  #+begin_src zsh :results table :exports both 
  ps -a 
  #+end_src 

  #+RESULTS:
  |   PID | TTY     |    TIME | CMD |
  | 70518 | ttys001 | 0:00.15 | zsh |

- =Graphviz DOT SRC CODE BLOCK:= 

  #+NAME: dot:-LOG_Nested-CLusters
  #+begin_src dot :file ./media/svg/nested-clusters.svg :exports both 
digraph D {

  subgraph cluster_p {
    label = "Parent";

    subgraph cluster_c1 {
      label = "Child one";
      a;

      subgraph cluster_gc_1 {
        label = "Grand-Child one";
         b;
      }
      subgraph cluster_gc_2 {
        label = "Grand-Child two";
          c;
          d;
      }

    }

    subgraph cluster_c2 {
      label = "Child two";
      e;
    }
  }
}
  #+end_src 
  #+attr_org: :width 600px
  #+attr_html: :width 600px
  #+CAPTION: DOT Generated Nested Clusters
  #+RESULTS: dot:-LOG_Nested-CLusters
  [[file:./media/svg/nested-clusters.svg]]

