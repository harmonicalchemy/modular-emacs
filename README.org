# -**- mode: org; coding: utf-8 -**-
#+TITLE: README
#+TEXT: Copyright © 2021 Harmonic Alchemy Productions & Others
#+AUTHOR: Alisha Awen - Harmonic Alchemy Productions (HAP)
#+EMAIL: harmonicalchemy@proton.me
#+DATE: {{{time(%A %Y-%b-%d)}}}
#+TEXT: Created: <2021-07-22 Thu>
#+TEXT: Last Published: <NOT Published>
#+FILETAGS: README HAP_Mod_Emacs

#+DESCRIPTION: MAIN README Doc for Harmonic Alchemy Productions - Modular Emacs... This File is NOT intended to be exported to PDF... It is for VIEWING on GitHub.com and Emacs Org-Mode ONLY...

#+BEGIN_COMMENT

=Setup TAGS:=

   For Cloned Versions of this template, the file/paths below will be relative
   to your parent project directory and as such, should be all set to your new: ~.../your_README.org_File's/org-templates/~ directory...

   *SETUPFILE:* ~default-tags.org~ is where tags are defined for this project...
              If you need to change the category, do it in your cloned version
              of default-tags.org...  If you rename default-tags.org file from
              "default" to something more specific, you will need to change the
              ~#+SETUPFILE: ./org-templates/default-tags.org~ line below to reflect
              your new file name as well...  You may change any of the tags except
              important ones to what ever you wish... Read the *:README:* drawer
              within the file for more information...

              The Existing Tags are useful for most situations within
              this context, and some of the tags MUST ALWAYS be defined
              for this LaTeX publishing system to work correctly...

              This file may be used by other ~.org~ files within this
              Master Folder... If you need to customize them specifically
              for this ~.org~ file alone, you should copy and rename:
              ~default-tags.org~ and modify your renamed copy instead...
              
              If you do this, you will ALSO need to change the
              ~#+SETUPFILE: ./org-templates/default-tags.org~
              directive below to reflect your changed file name...

              /(change the name from/ ~default-tags.org~ /to another name/
              /and-or replace some (but NOT ALL) of the tags within/
              /to your own tags... see instructions inside the file)/
#+END_COMMENT

#+SETUPFILE: ./Docs/org-templates/default-tags.org

#+BEGIN_COMMENT

=LATEST_TEMPLATE_UPDATE=
  <2023-10-18 Wed>

  =YOU MAY REMOVE This Drawer= from your own clones of this template if
  it is bothering you... This drawer is used for HAP Modular Emacs
  DOC TEMPLATES housekeeping...

  =HOWEVER= you may also use it for the same purpose to keep your existing
  Modular Emacs based org documents in sync with the latest updates of the
  template they were created from...
  
  =If you do wish to do the same... Read On Below...=

  - =PUBLIC USE Instructions:= /(FOR CLONES OF THIS TEMPLATE)/

      + [X] *FOR NEWLY CREATED CLONES:*

          - [X] =Change this= *:LATEST_UPDATE:* =drawer title:= /(within clones only)/

               Change it to: *:LATEST_TEMPLATE_UPDATE:*

          - [X] *REMOVE INTERNAL USE INSTRUCTIONS*

               Remove the main =INTERNAL USE Instructions:= bullet above...
               That bullet is only relevant to the TEMPLATE, /(not clones)/

      + [ ] *FOR ALREADY EXISTING PROJECTS*:

          - [ ] *COMPARE the TIMESTAMPS between THIS TEMPLATE and your PROJECT:*

              The BOILERPLATE content and meta data within CLONES of this
              TEMPLATE will get out of sync after a while due to Harmonic
              Alchemy Modular Emacs version updates etc... Some NEW features
              or HEADINGS may have been added that make sense to be added
              to your existing project /(originally a clone of this)/
        
              Use the ABOVE timestamp /(within the TEMPLATE and your CLONE)/
              to see if the clone's BOILERPLATE content needs to be updated
              /(brought into sync with its template - MERGE)/ and then perform
              any needed merging/replacing of BOILERPLATE and/or meta data.
              /(e.g, *:README:* drawers, etc. even this drawer)/
              
          - [ ] *Keep ABOVE timestamp within CLONES of this template UP TO DATE:*

              =AFTER Completing Above MERGE Step= and your clone's BOILERPLATE
              content has been brought up to date /(i.e. in sync)/ with its
              TEMPLATE... Then update the timestamp ABOVE... /(WITHIN YOUR CLONE)/
              to record the date of its last sync status...

#+END_COMMENT
#+BEGIN_COMMENT

=READ_ME_FIRST:=

=Instructions:= /(How to Install & Use This Template)/

To use *HAP_README-Doc-Skeleton.org* Org-Mode README Doc Template for your own projects, =Perform The Following Steps:= 

/Use the org-mode Checkboxes to Help You Keep Track of Progress/

1) [ ] *Clone a Copy of This File:*

     Put your clone within any existing writing or coding project's MASTER
     FOLDER or anywhere you need to have a simple NON-PUBLISHING README.org
     file associated with source code or other files...

     Existing MASTER FOLDERS contain other files for other projects as well
     as the SETUPFILES and MEDIA required by this README.org file...

     =Note:= If you put this file within other Project's existing MASTER FOLDERS
           that contain existing ~.org~ files /(cloned from other HAP_Doc-Skeleton/
           /template files)/ Pay CLOSE Attention to Steps 3 & 4 below to decide
           the correct action to take during those steps...

           =Do NOT OVERWRITE ANY PRE-EXISTING FILES or FOLDERS!!!=

           =OTHERWISE:= If this is a Brand NEW Project, name its NEW MASTER FOLDER to
                      reflect what this README Doc is about...

     =OTHER Files/Folders May also be placed Within your MASTER FOLDERS...=

2) [ ] =Start Composing your README Content NOW:=

      =NOTE:= You are most likely doing this because you have a project that
            needs a README File included as the Start Here Document for that
            project... Therefore... as soon as you are done with the first
            steps above, =STOP= and immediately begin composing your README
            Content within the: *📖 README* Binder =NOW=...

      =Add Sub headings below for your README as needed...=

      *btw*, if you Have *Harmonic Alchemy Modular Emacs* fully installed and
      have enabled the ~Xah-Fly-Keys~ module, you can quickly and easily
      insert your own /:README:/ drawers for your own purposes by typing:
      ~SPACE e r~ on an empty line while in command mode... Type those two
      keys, and the drawer is created for you automatically and opened...

3) [ ] =Finish Setting Up The Rest Of This Project LATER= [0/12]

     - [ ] *Change Title of :LATEST_UPDATE: drawer ABOVE:*

          AFTER Cloning, Change *:LATEST_UPDATE:* drawer title ABOVE
          /(WITHIN YOUR CLONE, NOT THE ORIGINAL!)/ to *:LATEST_TEMPLATE_UPDATE:*
          AND Follow Instructions within it...

     - [ ] *Copy/Clone:* ~./media~ /(and contents)/ *to your new project's MASTER FOLDER:*

          Copy this directory /(into your MASTER FOLDER as a sibling of this file).../ 
          Any external documents or images referenced by your *README Document* 
          should be placed within this ~./media/~ directory...

          All external links, images, within the boilerplate examples of this
          template may be used as examples for getting your own images, and 
          external attachments linked properly...  

          This single ~./media~ directory will serve media and external attachments 
          for this and other Modular Emacs Document TEMPLATE ~.org~ files that may
          exist within this MASTER FOLDER now or in the future...

          /(IF/WHEN THEY /WERE/ARE COPIED HERE)/

          =Note:=  You DON'T need to copy the ~./auto/~ directory... That directory
                 may be automatically created by *AuxTeX* when exporting other ~.org~
                 files based on *Modular Emacs* TEMPLATES but =NOT= from this ~.org~
                 file which is not set up for exporting to ~.PDF~...

     - [ ] *Copy/Clone:* ~./org-templates~ /(and all contents)/ *to your MASTER FOLDER:*

          =WARNING!:= To avoid overwriting existing files, DO NOT COPY this
                    ~./org-templates~ to your MASTER FOLDER IF ONE ALREADY EXISTS!

                    But DO follow the rest of this step so you will know what you
                    should do...

                    =OTHERWISE For MASTER FOLDERS that DO NOT already have one:=
                    *Copy this NEW directory to serve as your:
                    =NEW Readme Doc's MASTER FOLDER=
                    /(i.e., as a sibling/ /of this README.org file).../

          =Note:= ONLY ONE SETUPFILE Within this directory is called out and
                included by this ~README.org~ file /(within the file header above)/

          =WARNING:= There may ALREADY be an ~org-templates~ directory existing
                   within your MASTER FOLDER! In that case you will need to
                   merge: ~default-tags.org~ /(contained within)/ into your
                   existing copy of it instead...       

                   =YOU WON'T WANT TO OVERRITE EXISTING FILES= within this 
                   directory IF you are already using it for OTHER .org Files,
                   /(and they were modified!!!)/ but you may need to update
                   existing files you are NOT using currently if/when you
                   DO start using them...

      Other SETUPFILES within this directory are intended to be used by
      other document style project templates and are not needed for this:
      ~README.org~ Document... You may remove the extra files if you wish... 

      =HOWEVER:= If you decide to clone another ~HAP_<book-template>.org~
               file into this project folder it will pick up its
               associated SETUPFILES automatically because this folder
               already exists! Consider this case if/when you decide
               to delete other UNUSED SETUPFILES... They are small text
               files not really bothering you...

               /(YOU MAY NEED THEM LATER DEPENDING ON YOUR CASE)/

     - [ ] *Change the* ~#+TITLE:~ *directive at the top of this file:* 

          Change to: /"your Readme Document's REAL Project Title"/

     - [ ] *Change the* ~#+TEXT: Copyright © 2022:~ *directive top of this file:*

          Change to: /"Copyright © your info here"/ You are the copyright
          owner of your own documents created from clones of these master
          templates... /(but these MASTER Template Files are to stay under/
          /Harmonic Alchemy Productions copyright. Any Attribution to me/
          /for the template structure of your published docs will be/
          /appreciated... but unnecessary... Thanks! ;-)/

     - [ ] *Change the* ~#+AUTHOR:~ *directive at the top of this file:*

          Change to: /"your NAME"/

     - [ ] *Change the* ~#+EMAIL:~ *directive at the top of this file:*

          Change to: /"your EMAIL"/

     - [ ] *Change the* ~#+TEXT: Created:~ *TIMESTAMP at the top of this file:*

          Put your cursor on the TIMESTAMP: /i.e.,/ <2022-10-05 Wed>
          and type: ~C-c . . RETURN~ The TIMESTAMP will update to NOW.

          =LEAVE THIS DATE ALONE after Setting It The FIRST Time=

          This Date reflects the time/date that you first created this
          new document It should NEVER change after that...

     - [ ] *Change the* ~#+TEXT: Last Published:~ *TIMESTAMP at Publish Time:*

           =Don't Change This UNTIL You have completed some MAJOR Release=
           of the files or code that this ~README.org~ doc refers to and this
           README reflects the status of that MAJOR UPDATE
           /(e.g., as published somewhere, in a public repository etc...)/

           Until that publishing time comes leave it alone as:
           ~<NOT Published>~
          
           As soon as this is published as part of a major release, etc,
           Replace the <unpublished> placeholder with a REAL TIMESTAMP by typing:
           ~C-c . . RETURN~ The new Last Published: <TIMESTAMP> will appear in
           place... Do this ANY time you have completed some major update, have
           published that update and this file needs to reflect that update...
           /(this will help you keep track)/

     - [ ] *Change the* ~#+FILETAGS:~ *directive at the top of this file:*

          Add your own tags that match the context of your README document...

     - [ ] *Change the* ~#+DESCRIPTION:~ *directive at the top of this file:*

          Compose your ~README~ Doc's Description as a short paragraph here...
          and then use that to change the directive above...

4) *Purpose of the:* ~./org-templates~  *Directory:*

    The files in here are automatically linked and included within
    this template. You don't need to change those settings unless you
    wish to customize the already customized tags...

    /They are allready set up correctly for the General Documents genre,/
    /and the category is all set as well... But you can and may modify/
    /the original files to fit your needs.../
       
    Other SETUPFILES within this directory are intended to be used by
    other document style project templates and are not needed for this:
    ~README.org~ Document... You may remove the extra files if you wish... 

    =HOWEVER:= If you decide to clone another ~HAP_<book-template>.org~
             file into this project folder it will pick up its
             associated SETUPFILES automatically because this folder
             already exists! Consider this case if/when you decide
             to delete other UNUSED SETUPFILES... They are small text
             files not really bothering you...

             /(YOU MAY NEED THEM LATER DEPENDING ON YOUR CASE)/

             =AND= You won't want to OVERRITE existing files within this 
                 directory you are already using, /(and modified!!!)/
                 but you may need to update existing files you are NOT
                 using currently if/when you DO start using them...

    The DEFAULT Tags defined for all project templates are useful for
    most situations and SOME tags are ALWAYS to be defined for this
    LaTeX publishing system to work.

    /Change the SETUPFILE name ABOVE and within this directory from/
    ~default-tags.org~ /to another name and-or replace some -BUT NOT ALL-/
    /of the tags within to your own tags... see instructions inside the/
    /file.../

5) =This File is NOT SET UP TO BE EXPORTED TO PDF= [0/3]

      You may wish to export OTHER Modular Emacs based .org files within
      this MASTER FOLDER to PDF format however... To do that follow the
      instructions within those .org files

6) *Handling Images:*

   Some Images may render too large or too small to fit on a page
   of an exported version of this file... This is easy do fix within
   your content on an image by image basis...
      
   Use *LaTeX* and/or *HTML* attributes as follows on the images that need
   to be a different size...

   =NOTE:= Within Org-Mode =if you do NOT see images= but instead a LINK
         *USE:* ~C-c~ ~C-x~ ~C-V~ to Toggle back to image view...

   =Example:=
      
       #+CAPTION: Example larger size .png file 
       #+NAME:  example:00001
       #+attr_html: :width 600px
       #+attr_latex: :width 100px
      [[./media/lavender-banner.png]]

=These Instructions Were Last Modified:= <2023-10-18 Wed>

If you experience problems =Please Open an ISSUE At:= https://github.com/harmonicalchemy/modular-emacs/issues
   
Please use Issues to Ask Questions, Report Problems/Bugs etc., and Suggest Ideas for Improvement... =You guys are my Product Managers=  I am only a User of ONE "seat". Other folks UX metrics are sorely needed!! Thanks!

=Enjoy!= - Alisha Awen

#+END_COMMENT

#+NAME: fig:HAP-Mod-Emacs-Banner-001
#+CAPTION: HAP - Modular Emacs Page Banner
#+ATTR_ORG: :width 700px
#+attr_html: :width 700px
#+attr_latex: :width 700px
[[file:./Docs/media/Modular-Emacs-Github-Banner-v3.png]]

#+begin_quote
   *NOTE:* Skip to: [[#-tldr---start-here][☞ TL;DR - Start Here:]] if you are ready to install Modular Emacs *NOW* Skipping over Introduction, History, Purpose, etc... i.e., You just need to get all this going asap! :trollface:
#+end_quote

* 💡 Introduction:

*Welcome to Harmonic Alchemy Modular Emacs* ~V3.6.3 (point release) [Q3 2024]~

*Modular Emacs* provides a simple method of dispatching your emacs configuration in steps based on initial choice of modules starting with essentials loading first, and then loading optional user chosen modules...

There are module configurations for: *Dev♺Ops* other configurations for *Pub✎Ops* and yet others for 🎥 *MultiMedia* workstation *IDE* tasks.  Or ALL the Above completely capable of running on older but reasonably powerful *laptops/desktops* /(that would otherwise be considered legacy by most other standards)/.  

In Addition *org-mode* based *Document Templates* are being designed, /(still in beta design mode)/ which when exported via LaTeX, produce the fineset quality typeset PDF or eBook docs which can be printed as hard copy books, or used with eBook readers for a quality reading experience... See: [[#-screenshots][📸 Screenshots:]] below to see examples... /(images to be added later)/

Publishing via org-mode/LaTeX is being made as simple as possible, starting with these templates, allowing individual writers to immediately dive into professional publishing and independent book selling without depending on outside typesetting or publishing firms...

Emacs Org-Mode also makes it possible to do [[https://en.wikipedia.org/wiki/Literate_programming][Literate programming]]... Many of the templates being designed here show examples of this and other nice tricks to empower you as an individual writer, programmer, musician, whatever!

I am a systems architect, dev♺Ops engineer, computer scientist, composer/musician, sound designer, writer/publisher.  I wear a lot of hats! My Emacs needs to wear a lot of hats as well!  The central focus of *Modular Emacs* is to build empowering features into *Emacs* utilizing a modular framework that facilitates all the above without becoming an over complicated mess to manage! "*Good Luck With That*" :octocat:

We are still in V3 BETA /(point release)/ as many changes are still being made to the LaTeX export configurations... So far the Fiction Book Template is Exporting fairly nicely with few or no errors /(depending on added content within clones - the bare bones template renders nicely without errors now knock-on-wood!)/

When these org-mode export design changes are done, AND all existing Document Templates in PubOps folder are producing nice looking PDF docs, the V3 beta period /(point release)/ will end and that COMMIT will be tagged as the NEW *Official *V4.0 Release* 

Also, These README files are being converted from markdown to .org files which
IMHO is a more professional way to document... Github renders .org files to html
nicely, and you can add a TOC that renders nicely as well... So far only this README file and a few others have been converted... The old README.md file can be found in the ~./Docs~ directory...

All the rest of the markdown files within the Docs directory are being updated one at a time... TBD...

*Note:* Current Status & Release Notes of this project are
      documented [[./Docs/ModE-Current-Status.md][HERE]] /(WHICH NEEDS AN UPDATE NOW - TBD)/

* 🔖 Contents:                                                        :TOC_4:
- [[#-introduction][💡 Introduction:]]
- [[#-history--purpose][📜 History & Purpose:]]
- [[#-try-harmonic-alchemy-modular-emacs][☞ Try Harmonic Alchemy Modular Emacs:]]
- [[#-microsoft-windows-support-needed][⚙ Microsoft Windows Support Needed:]]
- [[#-my-commitment][🙏 My Commitment]]
- [[#-screenshots][📸 Screenshots:]]
- [[#-tldr---start-here][☞ TL;DR - Start Here:]]
     - [[#-requirements][✅ Requirements:]]
          - [[#-clone-this-repository][⎘ Clone This Repository:]]
          - [[#-install-emacs][🛠 Install Emacs:]]
          - [[#-nodejs---nvm--npm-removed][🚫 NODE.js - NVM & NPM: /(REMOVED)/]]
          - [[#-multimarkdown--mmd-mode--removed][🚫 MultiMarkdown & mmd-mode:  /(REMOVED)/]]
     - [[#-optional-extras][🎁 Optional Extras:]]
          - [[#-pandoc][🛠 Pandoc:]]
          - [[#𓂀-fonts][𓂀 Fonts:]]
          - [[#-python--pip][▞ Python & Pip:]]
          - [[#extra-for-experts---latex][Extra for Experts - LaTeX]]
          - [[#-graphviz][📈 Graphviz:]]
-  [[#prepare-modular-emacs-for-first-run][Prepare Modular Emacs for First Run:]]
     - [[#-initial-house-keeping-before-we-move-in][🏠 Initial House Keeping: /(before we move in)/]]
- [[#-ready-set-go-start-up-modular-emacs][📢 Ready Set Go! Start Up Modular Emacs:]]
- [[#-usage][🎨 Usage:]]
     - [[#managing-your-git-repo][Managing Your Git Repo:]]
     - [[#blackboard-color-theme][Blackboard Color Theme:]]
- [[#-default-package-features-built-in][✅ Default Package Features: /(built in)/]]
     - [[#default-emacs-welcome-screen-scratch-buffer][Default Emacs Welcome Screen: /(~*scratch*~ buffer)/]]
     - [[#miscellaneus-packages][Miscellaneus Packages:]]
     - [[#core-emacs-system-related-packages][Core Emacs System Related Packages:]]
     - [[#emacs-helm--extras][Emacs Helm & Extras:]]
     - [[#tree--menu-related-packages][Tree & Menu Related Packages:]]
     - [[#dired-related-packages][Dired Related Packages:]]
     - [[#devops-sysadmin-infosec-related-packages][dev§Ops, sys§Admin, info✷Sec Related Packages:]]
     - [[#writers--publishing-tools][Writer's & Publishing Tools:]]
     - [[#spelling][Spelling:]]
     - [[#key-bindings][Key-bindings:]]
- [[#-optional-packages--customization][🎁 Optional Packages & Customization:]]
- [[#-begin-log][📅 Begin Log:]]
     - [[#-2023][📅 2023:]]
     - [[#-2024][📅 2024:]]
- [[#-meta-usage--templates][📋 Meta: /(Usage & Templates)/]]
     - [[#-templates][⎘ Templates:]]
          - [[#new--generic-log-entry-general-log-entry-template][NEW 🗓 Generic Log Entry /(General Log Entry Template)/]]
               - [[#new--reference][NEW 📚 Reference:]]
               - [[#new--time-card][NEW ⏱ Time Card:]]
               - [[#new--summary-03][NEW 📃 Summary:]]
               - [[#new--details][NEW 📰 Details:]]

* 📜 History & Purpose: 

The history of *Harmonic Alchemy Modular Emacs* is like a confusing *Adventure* through many little twisty passages, all alike... /(or all different)/  [[./Docs/ModE-History.org][Everything is Documented Here Now]]  Read it at your leasure. It provides some perspective, insight, and purpose behind how and why things are done here in the present time.

* ☞ Try Harmonic Alchemy Modular Emacs: 

For those of you who feel [[https://github.com/harmonicalchemy/modular-emacs][Harmonic Alchemy Modular Emacs]] may be exactly what you were looking for, By all means... Lets Dive in!

There are some external requirements... It may take a while... If that's OK with you, Great!... Lets go...  Eventually I will script this up so you can just enter this at the command prompt: ~./install.sh~ and be done with it... Keep your fingers crossed on that but don't get your hopes up... I am a busy girl!!! :octocat:  That script will have to install a lot of things! It will have to check a lot of system states!  I have to work all that out as a non-interactive process.  It should install everything /(transparently non-interactively)/ from that single running shell script...  If you have to answer questions and make decisions... Better that you execute manually instead, and read the docs first...  Right?

* ⚙ Microsoft Windows Support Needed: 

Hello MS Windows Veterans...

I admit to having no experience at getting a nice Emacs GUI environment running nicely on MS Windows, as I am a Hard Core Mac user and have not used a MS Windows box since Win-XP days... LOL and I never upgraded to that VISTA crap either...  Thank Goddess!

I am sure the newest latest greatest MS Windows (10 now?) is Awesome!!! I just don't use it... sorry...
      
*Harmonic Alchemy Modular Emacs* expects to be installed on a Linux or BSD machine, or unix friendly machine contaning standard unix apps and utilities or
proper hooks into such things... Many of these may not be implemented within the canonical Windows OS model and I have no experience sorting that out...

It is hard enough to get Mac OS to behave along side GNU Linux or other free software and open source standards!
      
I do not wish to abandon MS Windows users however. So I dedicated a document within Harmonic Alchemy Modular Emacs to record any information needed to help get Modular Emacs running on MS Windows.

Please consult: [[./Docs/ModE-Note-2-MS-Windows-Users.md][Note for MS Windows Users]] for more information...

I am looking for a good MS Windows Sys Admin type to jump in here and help... Where are you??? Please open an issue with intro to yourself for me to       review... Thanks!

For the rest of us... For now... Let's learn this together... Please provide any feedback about your experience attempting to install this on a MS Windows box, Please open issues, ask questions!  We will get this part done some how... Thanks ;-)

* 🙏 My Commitment 

#+begin_quote
   "Always do what is right. It will gratify half of mankind and astound the other." - Mark Twain
#+end_quote

One of the main purposes of this project is to empower lots of creative folks out there who have more brains than money.  This project is 100% free software, Free to download, install, and use independently, /(both as in "Free Beer" and also as in having "Freedom of Choice and Control" over your Computing Infrastructures)/

I have been testing this project to see if it can successfully run on older legacy hardware as well.  My aim is to make it possible for anyone, no matter what their economic or social status is, to be empowered to use this...

To =GIVE YOU a VOICE=, to =GIVE YOU MORE CONTROL= over your digital life operations and creations. To provide you with a future proof portable/inexpensive way to publish your ideas, stories, projects for the rest of the world to see...

*Harmonic Alchemy Productions - Modular Emacs* is NOT some cheap publishing tool, but an entire arsenal of professional publishing and project management tools, ALL "free or open-source", ALL under your independent and private control /(No Middle Men Dictating Rules, no "share cropping")/..

I am committed to making this *process/journey* as painless as possible for you as I have found many other Emacs setups to be way to complicated to make it easy for adoption into my workflow, and you are probably experiencing the same!

On the other end of the spectrum... Installing basic Emacs alone is not enough to get you started _(IMHO)_...  I made a few tweaks to the Emacs Basic Operation to get you up and running with a simple setup that works well out of the box...

You will quickly outgrow that initial setup however, and will certainly want to enable some extra features you are learning about! =WARNING!= This is where Danger can lurk if you are lulled into installing something that is pure CRAP!  Trust me on that... Don't fall for the hype... Check it out thoroughly before using.  Are there a LOT of Stack Exchange posts about that package? That's a red 🚩 flag...

I hope to make this process of discovery reasonably easy to do for you!  The whole purpose of this project is to be able to easily grow and shrink features as needed in any combination thereof... Without getting lost in a tangled mess of twisty little passages all alike! /(or different)/

If you end up liking *Harmonic Alchemy Modular Emacs*, please drop me a note to let me know! Please do ask questions, open issues, etc.  Thanks!  I have been using Emacs since around 1986/87 /(OMG that long! off-and-on with gaps in between ;-)/ but I never shared any of that Emacs knowledge with anyone before now... :heart_decoration:  

=Therefore:= *Here is Modular Emacs!* I hope my long years of *devOps* experience will turn out a nice jewel for new comers to try out and succeed with! *Good Luck and God Speed!*

* TODO 📸 Screenshots: 

=Misc. Screenshots displaying HAP Modular Emacs main Features=

#+NAME: fig:HAP-Mod-Emacs-gen-log-book-details-001
#+CAPTION: HAP - General LOG Book (details)
#+ATTR_ORG: :width 600px
#+attr_html: :width 600px
#+attr_latex: :width 600px
[[file:./Docs/media/HAP-General-LOG-Book-details-01.png]]

* ☞ TL;DR - Start Here: 

Follow the steps below /(in a top down fashion beginning with "Requirements:")/ to install: *Harmonic Alchemy Productions - Modular Emacs* for the first time...

Do not skip to the /(optional)/ install guides until you have the basic default configuration of Modular Emacs installed and running /(without errors)/ in your home directory...

#+begin_quote
   *Note:* It is entirely possible that Modular Emacs will run reasonably without enabling many of the basic modules listed below. Starting bare bones like that may be a good way to get your feet wet without running into initial problems or having to install many required externals, all at once... Later, when you have a better handle on this, try installing some of the extra requirements, /(like a FULL LaTeX Package)/ and then enabling some of the more advanced modules...
#+end_quote

** ✅ Requirements: 
*** ⎘ Clone This Repository: 

Clone this repository into your ~$HOME~ directory as: ~me.init.d~. The ~me.~ prefix /(for Modular Emacs)/ is put there so that it will not overwrite your existing ~$HOME/.emacs.d~ directory /(if you already use Emacs, which you will still need operational)/.  We will rename this folder later after all other requirements are complete...

Issue the following command within your default *terminal* application:

#+begin_src bash
  git clone https://github.com/harmonicalchemy/modular-emacs.git ~/me.emacs.d
#+end_src

After the above is done, leave things here as they are and go do the rest of the steps below... We will come back to this later when we are just about ready to launch *Harmonic Alchemy - Modular Emacs* for the first time...

*** 🛠 Install Emacs: 

- =UPDATE:= <2025-04-06 Sun> *No Need to Build Emacs from Source ANYMORE:* 

  on MacOS, or ANY OS... In the old days I found it hard to get the proper Emacs Build for MacOS with all the correct tools installed etc... /(like it is on NX machines)/...

  So I created a procedure to build Emacs from the GNU repository directly... That was a cool thing back in the day but today I have a GAZILLIAN OTHER THINGS to take care of and MacPorts / Homebrew etc. have got all that together now... Much better than before...

Here is a LINK to =MacPorts Build/Install Options:= [[https://ports.macports.org/port/emacs-mac-app/details/][MacPorts: emacs-mac-app]]
I don't use Homebrew anymore so someone else needs to pipe in about that... There are many links on the web for Homebrew Emacs on Mac though... Good Luck! 

=Follow INSTRUCTIONS Below with the ABOVE UPDATE in Mind:=

Many of the default packages installed with this project will not work with older versions of Emacs. Also the security older Emacs packages is horrendous! Recently, some of the older packages were removed from the updated MELPA and moved to other less-secure repositories. The entire MELPA site is TLS enabled now but these other repos are not very secure...  Updated features /(acquired securely)/ are vital for being reasonably safe going forward from 2020 onward...  Therefore, I decided not to support versions of Emacs prior to V26 and prefer to only support Emacs V26.1 and up...  

=Warning!= If you have a really old version of Emacs currently installed,
         it may break after you update Emacs below... Therefore before
         installing a brand new version of Emacs it may be a wise idea
         to save your current emacs environment, e.g., ~.emacs~,
         ~$HOME/.emacs.d~, etc... as well as a copy of your old *Emacs*
         Application...

         This is for a safety net, Do NOT delete your existing setup...
         You still need your existing Emacs working wile you are getting
         all the requirements below together for Modular Emacs... 

- [ ] *Copy/Clone your entire:* ~$HOME/.emacs.d~ directory and/or ~$HOME/.emacs file~, 
     as well as a copy of your old *Emacs* application into a temporary
     directory of your choice before upgrading below... /(or compress/
     /and make a/ ~.zip~ /or/ ~.gz~ /archive file)/

     This will be your safety net for coming back later if you decide you
     are not ready to upgrade. If anything goes wrong, you will be able
     to reverse everythig back no problem!

- [ ] *Once your house is in order as above:* /(OPTIONAL)/ 
  
      [[./Docs/ModE-Install-Emacs.md][Click this Link to Build or Install Emacs 26+ on Your Platform]] 

*** 🚫 NODE.js - NVM & NPM: /(REMOVED)/ 

Previous versions of Harmonic Alchemy Modular Emacs required installing *NODE Version Manager* ~NVM~, and *Node Package Manager* ~NPM~, so that we could use the *Visual MarkDown application* ~VMD~ as a *WYSIWIM* /(what you see is what I mean)/ editing environment for *Markdown* files within Emacs...

I have decided to abandon *VMD* due to a critical security volunerability which has been discovered.  I am actually late to getting around to mitigating this problem... Since Harmonic Alchemy Modular Emacs only needed that single NODE JS applicition, I have decided to remove the entire NODE JS elephant so that it is no longer required...  You should NOT install NODE JS unless you are a dedicated JavaScript developer, and then you need to be extra careful about what apps from other devs you may wish to install... "It's a jungle out there, makes me wonder how I keep from going under!" - GMF

I recommend installing Ocular on Linux, and use Mac OS built in Preview to see
your markdown files rendered for reading normally etc.  I am no longer writing docs in Markdown as you can see this README file is now written in Org-Mode...
Github displays .org files great and you can even have a Table of Contents!

So going forward with Harmonic Alchemy Modular Emacs we will be doing ALL our
docs from now on in org-mode and taking advantage of the nice org-mode features I have tweaked and beautified for Writers, Authors, Coders, i.e., anyone tired of plain jane org-mode appearances...

*** 🚫 MultiMarkdown & mmd-mode:  /(REMOVED)/ 

*Multimarkdown* and ~mmd-mode~ are NO longer required or configured for use by *Harmonic Alchemy Modular Emacs*...

As above for NODE JS and VMD, I have decided to remove this old ancient emacs mode which I had to clone and modify to get it working in newer versions of emacs... I removed external multimarkdown requirements as well... 

I am no longer using Markdown as my go-to doc format for anything except WebSites which require content to be delivered that way, and therefore don't need this extra Markdown stuff that was only needed for Github... Normal emacs Markdown mode works great by itself... *Pandoc* /(optional package below)/ is a much better universal swiss army knife for converting from one format to another than multimarkdown as well...



** 🎁 Optional Extras: 
*** 🛠 Pandoc: 

*Harmonic Alchemy Modular Emacs* will run fine without Pandoc installed on your machine, and in fact is not even used internally... Pandoc exists as an external tool you may need from time to time to convert from one format to another when *Emacs* or *Org-Mode* cannot perform the same thing internally...

Therefore, instructions for getting Pandoc installed on your platform are included here but it is not required for operation... It is /"Extra for Experts"/ 

*Read the docs for Pandoc* to decide how to use them. More instructions for installing and using Pandoc can be [[https://pandoc.org/installing.html][found on the Pandoc Official Website]]...

The [[Pandoc.org]] website has most everything you will need all in one place!

[[./DOCS/MODE-INSTALL-PANDOC.MD][FOLLOW THIS LINK]] to Harmonic Alchemy Modular Emacs' Pandoc Install Guide /(All Platforms)/

*** 𓂀 Fonts: 

*Harmonic Alchemy Modular Emacs* recommends a few fonts to be installed on your system to get Fancy Org-Mode, Fountain Screenplay, and coding frames/windows/mode-lines, etc. looking as good and "readable" as they possibly can.

=HOWEVER THIS IS NOT A REQUIREMENT for PROPER OPERATION=

You may or may not be fine with the fallback default fonts if the fonts below have NOT been installed on your machine... I have not tried defaults so your mileage may vary...

Other fonts will be required by *LaTeX* /(for exporting to external document types)/. That process will be covered in a seporate doc and as well is also not entirely "required" for proper operation of Harmonic Alchemy Modular Emacs.

For Instructions on how to install modular emacs recommended fonts on All Platforms, [[./DOCS/MODE-INSTALL-FONTS.MD][FOLLOW THIS LINK]]... Afterwards, you will see some nice looking "writers" fonts in Org-Mode as well as while editing Fountain drama scripts! :octocat:

*** ▞ Python & Pip: 

Some of the newer /(OPTIONAL)/ modules to be enabled within *Harmonic Alchemy Modular Emacs* will require Python packages to be installed... This is especially true of *Emacs MultiMedia System* ~EMMS~ which is enabled within optional module: [[./lisp/modules/11-games-pkg-conf.el][11-games-pkg-conf.el]]]

[[./Docs/ModE-Install-Python-PIP.md][FOLLOW THIS GUIDE]] to get *Python & PIP* set up within your local environment so you will be ready when python packages are needed to be installed now, or later...

*** Extra for Experts - LaTeX 

No I did not forget *LaTeX*...  This is a powerful monster! It needs its own monster doc to install and configure as well... You need it to work with *Pandoc* as well as *org-mode* to take atvantage of advanced export options of included example Org-mode Doc Templates within the PubOps Section...

LaTeX provides extended features to produce PDFs, and eBook formats... Emacs can be integrated, (especially ~org-mode~) to be able to export to these fancy formats using LaTeX...

This is Great News if you would like to make *Emacs* work as well as /(or better than)/ *Scrivener*...  So get on it already OK?

- [ ] =Install Optional LaTeX Publishing Environment:= [[./DOCS/MODE-INSTALL-LATEX-PUBOPS-ENV.MD][FOLLOW THIS GUIDE]]...

*** 📈 Graphviz: 

Harmonic Alchemy Modular Emacs is =OPTIONALLY= configured to use the popular *Graphviz utility*, allowing the creation of nice graphs, flowcharts, data diagrams, etc. using a powerful scripting language called *dot*...  The Emacs mode for Graphviz is: ~graphviz-dot-mode~

Modular Emacs invokes: *graphviz-dot-mode* /(independent of whether graphviz is actually installed on your system)/ when you visit files ending in either: **`.dot`** or **`.gv`** Emacs will format these files nicely for you... But you cannot execute them unless you have Graphviz installed externally...

If you DO have Graphvix installed... When you visit a ~.dot~ file, you can compile it with: ~C-c C-c~ which will produce an ~.svg~ file along side...  By default, Modular Emacs is configured to produce *SVG* vector files instead of ~.png~ files which is my preference because if you export and then view it as a PDF you can expand the resulting rendered chart or graph full screen and it will still look very sharp! Not to mention you can edit the resulting SVG file within *inkscape* to add things to it that Graphviz cannot...  Don't underestimate the power of *Graphviz* though! [[https://graphviz.org/documentation/][READ THE GRAPHVIZ DOCS!]]

- [ ] =To Install Graphviz - All Platforms:= [[./Docs/ModE-Install-Graphviz.md][FOLLOW THIS LINK]] 

*  Prepare Modular Emacs for First Run: 
** 🏠 Initial House Keeping: /(before we move in)/ 

- [ ] *Create an empty file:* ~custom.el~ 

     This file keeps *Emacs Internal "Customize"* saved settings separate
     from *Modular Emacs constructs* and outside of your ~.init.el~ file!
     /(so you won't have to worry about tiptoeing over it)/ Emacs will
     use this file /(initially empty)/ behind the scenes to save your
     Emacs internal "customizations"...  Git ignores this file.
     /(Which is why we have to create it here now)/ You will not need
     to mess with this file after creating it, /(unless you want to/
     /empty it out and start over when Emacs "customized" things get/
     /out of hand)/...
     
     Create Empty Custom.el File:
     
       #+begin_src bash
       touch ~/me.emacs.d/custom.el
       #+end_src

- [ ] *COPY/CLONE:* ~me.init.el~ *to:* ~init.el~ 

     ~me.init.el~ is a template for reference only...  I did it this way,
     adding: ~init.el~ to: ~.gitignore~ for the purpose of providing more
     flexible ways to manage your local install of Modular Emacs...
     ~me.init.el~ will stay in sync with the remote origin while your
     local clone: ~init.el~ runs the show /(with any changes you might add)/
     without triggering git to complain about new un-tracked files etc...  

       #+begin_src bash 
         cp ~/me.emacs.d/me.init.el ~/me.emacs.d/init.el
       #+end_src

     Later... You may want to edit your fresh new ~init.d~ and change
     the Banner Message to be more specific to your installation...
     Also, later we will discuss different strategies of management
     that will hopefully allow you to build your own setup concurrently
     and in harmony with Modular Emacs, and be able to easily share any
     extra features/modules of your own that you may wish to bring to
     the rest of the Modular Emacs user community!

- [ ] *FINAL STEP - Make Modular Emacs Folder the DEFAULT ~$HOME/.emacs.d~ Folder:*  

     At the very beginning of this guide, you were advised to copy your
     existing Emacs setup first.  I hope you did that because now you are
     going to over-write your old installed Emacs configuration with
     Harmonic Alchemy Modular Emacs!  

     Therefore if you did not backup, FIRST make sure to rename /(save)/
     your existing: ~$HOME/.emacs.d~ to: ~$HOME/save.emacs.d~ /(if you did not do/
     /this in the beginning)/ You may also have a ~.emacs~ init file outside
     of the ~.emacs.d~ folder that also needs to be renamed!
     =This is very important!= Becase the next steps will overwrite them
     if you did not change their names!!!

     Now you are ready to rename: ~$HOME/me.emacs.d~ to: ~$HOME/.emacs.d~

       #+begin_src bash
        mv ~/me.emacs.d ~/.emacs.d
       #+end_src

     ~$HOME/.emacs.d~ is now your new *Modular Emacs Local Repository* which
     is also now your default *emacs* home directory! 

     =One last sanity check=... Make sure you no longer have a ~$HOME/.emacs~
     file still in your home directory...  You should now only have
     a: ~$HOME/.emacs.d/~ directory and that's the only "emacs" in your
     ~$HOME~ OK? Great! :octocat:
     
* 📢 Ready Set Go! Start Up Modular Emacs: 

- [ ] *Start up GNU Emacs:*
  Envoke Emacs either from the menu or command line and hold your breath! After a lot of super computing lisp number crunching flashing away in your mini buffer /(wait wait wait... for a/
     /BUNCH of packages to download and compile the first time,/ /which can take up to a minute or more!)/ After that startup should take no more than 5 or 6 seconds at most unless you have some huge new package that needs to be installed...

  After your long wait... *Bam!* You should see your new emacs screen pop up with *Welcome to Harmonic Alchemy Modular Emacs!* heading your scratch buffer in a frame with a pre-determined      row/column initial size! 

  =NO?= *It's Broken?* Oh My! 🤦‍♀️ =What a freaking let down!= *I feel your pain!* OK... Don't worry if all you see are only numerous compiler warnings... /(those are hard to avoid upon first startup with/ /all the new packages compiling etc. Not much you can do about/ /that... The developers who made the packages need to clean/ /that up, you could help them though. You can safely kill that/ /message buffer and move on.)/...

  =Yes?= *It worked?* =Yay!= ☕ What a fantastic feeling the first time eh? 

- =Note1:= I am still chasing an OLD issue with some functions, /(not mine)/ calling the old depreciated ~cl~ /(common lisp/ /library).../ These will be replaced with calls to the new ~cl-lib~ replacement... When that happens you will no longer see the warning: *"cl lib is depreciated"* at startup...  There are several other warnings like this I will eventually chase down as well... 

It is hard to keep Emacs Lean and Mean with all these *seat-of-the-pants developers* building packages that pull in gigabytes of *FLUF* just to provide some stupid silly function that you can do in three lines by yourself! *FLUF* = "Fluf is Lousy Unnessary F**ks**t!" /(R-rated Recursive Acronym inspired/ /by: Xah Lee & Having to live with F**king GNU)/

If you got an error that halted completion part way thorugh, and you have an incomplete emacs startup init screen, try to retrace your steps or try running emacs with ~--debug-init~ turned on... It's probably something dumb and easy to fix...

/(This happens to us all the first few times, and comes back again/ /later as well most of the time.  Other errors only come up in a blue/ /moon, and then mysterously go away and hide before you can catch/ /them! DOH! Compiler Logs are a hacker's best friend)/ :trollface:

- =Note2:= Fetching/pulling new changes

  from the master ~modular-emacs~ GitHub repository to your local `~/.emacs.d/` directory will           automatically be reflected within your emacs configurations... No need to copy any more files... But you may be surprised to see some new feature or something working differently. If that bothers you, you may wish to keep your changes separate from the remote master branch.  Therefore create your own local ~test~ branch /(or call it what you like)/ and maintain your local changes in parallel... Change your local branch's .gitignore to accommodate your needs...

- =Note3:= The remote ~modular-emacs~ Github repository

  also maintains a ~develop~ branch where new ideas and features are tried out before folding them into the master branch which maintains the Modular Emacs stable release.  You could also create a local branch that tracks origin:develop if you would like to participate in any new things I am trying out before final release... Earlier point versions of Modular Emacs were first staged and tested within the develop branch.  Version 3.x is tested on the develop branch currengly. /(if not already merged into master by now)/... Any time a final release of new features is ready, the develop branch will be merged back into master branch, tagged as a new point release /(or major release when a lot of new features have been/ /added to warrant it)/... maybe not this time eh?  LOL 

- =Note4:= I have created a new branch called: ~xah-fly-keys~ where the
          optional module: ~12-Xah-Fly-Keys.el~ has been enabled by default.
          You don't have to make any modifications in order to try this
          otherwize optional feature when you are on this branch.
          Try it out! It's easy to switch back and forth now...

* 🎨 Usage:

** Managing Your Git Repo:

The *Harmonic Alchemy Productions - Modular Emacs* git repository is configured to ignore your local ~$HOME/.emacs.d/init.el~ file... The file: ~$HOME/.emacs.d/me.init.el~ is kept in revision and you do not use or touch this file directly...  Instead, your standard emacs config file: ~$HOME/.emacs.d/init.el~ starts out as a clone of ~$HOME/.emacs.d/me.init.el~ allowing you to try out new things on the fly without upsetting the state of the git repo...

*HAP - Modular Emacs* is configured this way for some good reasons...

   1) *First*, it allows you to return to the default setup easily in
      case you mess up your ~.init.el~ file somewhere along the way...
      
   2) *Secondly*, this file is intentionally kept very simple...
      There are NO implementations there... Instad ~.init.el~ calls
      a *Module Dispatcher* ~dispatcher.el~ and that file is responsible
      for dispatching /(loading)/ the entire emacs configuration /(modules)/
      for *HAP - Modular Emacs*...
      
   3) *Thirdly*, It makes it =SUPER EASY= for you to disable your current
      *HAP Modular Emacs* in order to try some *OTHER Emacs Configuration*
      you may have wanted to try out. /(without too much trouble)/ right
      in place without hurting your current HAP Modular Emacs Setup...
      Going back simply involves renaming the associated ~init.el~ file,
      and replacing it with the original, or visa-versa...

Feel free to use your ~$HOME/.emacs.d/init.el~ /(clone)/ to try out experimental customizations or tests. =HOWEVER=... *There are BETTER Ways to customize HAP Modular Emacs* leaving your ~.init.el~ as is... /(other than changing the/
/boilerplate heading that gets displayed to suit your fancy)/ This is the
purpose of ~dispatcher.el~ and the ~my-modules~ directory...

You can also use the Emacs ~*scratch*~ buffer to paste experimental lisp code to try out before making it permanent as a stand alone ~.el~ emacs lisp file, /(as the welcome banner suggests ;-)/. Evaluate the entire ~*scratch*~ buffer without needing to remove the banner message at the top as that message is one huge lisp comment... If something horrible happens, no worries... Simply restart emacs... Your mess-up will be gone and you will be back to where you were before you or that elisp test code goofed up...

If your customization proves stable, and you like it, you could then save your scratch buffer (as is) to a new file, for example:

   ~$HOME/.emacs.d/lisp/my-modules/xx-my-new-module.el~

In all cases you would also be wise to also create and checkout your own private local ~test~ branch /(call it what you wish)/ and keep all your custom changes in there separate from the ~master~ or ~origin:develop~ branch...

The directory: ~$HOME/.emacs.d/lisp/my-modules/.~ is NOT tracked by *git*... So you can put anything in there without upsetting your local or remote tracking branches... 

=ALSO= if you copy any of the files from: ~$HOME/.emacs.d/lisp/modules/.~ to  ~$HOME/.emacs.d/lisp/my-modules/.~ They will OVERRIDE the ones in ~modules~ and will NOT be tracked, SO you can try out mods within ~my-modules~ without messing up your current git status...  If something goes wrong, simply delete or rename your clone within ~my-modules~ and you will be back to where you were before...
Easy Peasy.. /(this all works in a similar way to how the oh-my-zsh repository behaves for local ZSH configurations)/

You can even *clone OTHER git repos* wihtin ~my-modules~ without messing anything up! This is better than using lousy sub repos /or what ever that is called/... I tried using git sub-repositories once and then ran for my life scared as shit after that initial crappy experiece!  LOL "What were you guys smoking when you created that mess?" Alisha is very opinionated about some things eh? RIGHT!



** Blackboard Color Theme:  

*HAP Modular Emacs* comes with my new customized version of the *Blackboard color theme* /(patterned after the famous Textmate Blackboard Theme)/ which I like for the *pedagogic essence* it inspires... I have also tweaked it to look good under my *Fancy Org Mode* colors and faces.  If you would like to add more custom themes or a different theme than ~blackboard.el~, you can replace it or add additional themes into your local branch's: ~$HOME/.emacs.d/lisp/themes~ directory and they will also will work with this setup by choosing ~M-x load-theme~ or changing the last line within ~$HOME/.emacs.d/lisp/modules/06-interface.el~ to:

   ~(load-theme 'your-chosen-theme-name t)~

=Note:= Obviously if you add more themes to your *Modular Emacs* ~themes~
      directory you will be adding new un-tracked files to your
      cloned git repository! /(this one does not have an untracked/
      *my-themes* /directory option like/ *my-modules* /is set up - but/
      /I may add this later if needed)/...

      Make sure you have checked out your own local branch before
      adding new themes or doing any customization outside the
      ~init.el~ file or the ~my-modules~ directory, OTHERWISE you will
      get out of sync with remote tracking branches!!!

      Checking out a LOCAL untracked branch is the proper way to
      do code management of your own local custom changes tracked
      seporately under your own code revision schemes in place ready
      to merge any NEW changes from the remote Modular Emacs branches
      any time you feel that may be necessary... /(merging conflicts/
      /along the way as needed)/



* ✅ Default Package Features: /(built in)/

** Default Emacs Welcome Screen: /(~*scratch*~ buffer)/

The default Emacs Welcome Message is replaced with a custom greeting banner that shows the current emacs configuration, and date... With a famous Mark Twain quote /(My Favorite author)/... This quote may change from time to time with new updates...  

Use Scratch buffer to evaluate snippets of ~lisp~ without having to remove
the welcome text... /(which are lisp comments)/

** Miscellaneus Packages:

- [[https://github.com/milkypostman/powerline][powerline]] - Decorate ~mode-line~ & make it More Informative.
   You can customize options and use themes etc...
   =THIS PACKAGE IS DISABLED BY DEFAULT=... I am back to the Emacs
   default mode line and I customize that instead. I did not remove
   the code to enable powerline though.  If you like powerline,
   the code for enabling it is located within ~02-package-conf.el~...
   Read the comments in that file to find it...

- [[https://github.com/auto-complete/auto-complete][auto-complete]] Easy Text Editing with suggested word completion.
   =THIS PACKAGE IS DISABLED BY DEFAULT=...
   =I am NO LONGER USING THIS FLUF!=

   With AC enabled... When entering code, if you enter a function
   name and completion pops up, you are =TRAPPED! OUCH!!!= I don't
   like that! If I want to keep typing /(not accepting the default/
   /or maybe what I want is different than what it thinks?)/... It
   fights me...  I have to fool it by typing some junk and then
   pull off a text switch game.... LOL!

   The code that activates auto-complete has not been removed yet
   but it is commented out to disable ALL of it...

   If you LIKE AC, /(you are an odd one if you like being trapped)/
   you can still go in and un-comment the related code within
   ~02-package-conf.el~ and enable that mess if you so choose!

   I may soon delete all that *FLUF* code out later however...



** Core Emacs System Related Packages:

- [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] Get environment variables such as ~$PATH~ from
   the shell.  btw, this can be a tricky thing to do in emacs!
   I have struggled with this on Mac OS for a while! You may find
   you have to start Emacs from the terminal to get all your
   environment vars into Emacs!  More about that later.. A continuing
   saga!

   =Update 2020:= This has been working fine on my iMac since completely replacing Homebrew with MacPorts. IMHO /(biased by a host of/
   /irritant issues using Homebrew over the years)/ MacPorts is a much
   better package manager all around... But not the popular one...
   Oh Well... %^) Also, since building my own Emacs from GNU source
   tree on my iMac, configured just how I like it, I have had no more
   nagging MacOS related issues... And I can have the latest Emacs
   the second it is released /(one build cycle away, or choose to go/
   /back to my archived app if they introduce some bug or someting!/
   :octocat:
   
** Emacs Helm & Extras:

- [[https://github.com/emacs-helm/helm][helm]] Helm is an Emacs incremental and narrowing framework that
   helps speed up operations on commands with structured command
   completions and more.  It is a programmable interface (API) as
   well. To see how HELM can speed things up try a prefix key
   like: ~C-x~ or ~C-c~ or ~M-x~ and just wait before typing any more
   keys... You will see all the possible key-combos currently
   associated with that prefix key pop up in the HELM mini-buffer!
   Fantastic! No more guessing! /(Oops! What did I just do? OMG!)/

- [[https://emacs-helm.github.io/helm/][helm-core]] Development files for Helm (API) dependency.

- [[https://github.com/emacs-helm/helm][popup]] Popup is also a dependency package used by helm.

- [[https://github.com/justbur/emacs-which-key][which-key]] Another Dependency package used with helm...
   This package pops up suggestions for what can follow after
   pressing ~C-x~ key... /(this is what I was talking about/
   /above in the intro paragraph for HELM)/

   =Note:= ~xah-fly-keys~ also uses helm to pop up leader key
         choices and extended menu...  Hit the ~SPACEBAR~
         /(LEADER KEY)/ and wait a second for helm to pop up
         the list of options... /(with help feature and/
         /pagination! Vital for learning all those keys!)/
         
** Tree & Menu Related Packages:

- [[https://github.com/fourier/ztree][ztree]] An efficient directory tree comparison utility. Invaluable for visually oriented thinkers! Integrates directly with ediff files!

   + *To invoke Ztree Diff type:* ~C-c z~ /(normal Emacs edit mode)/
      or symply type ~"z"~ from *Xah-Fly-Keys Command Mode*, and
      then choose directory ~"A"~ & ~"B"~ /(as prompted)/ to compare
      all files within both directories.

   + Make your screen wide to see both directories listed side
      by side. The file names are color coded, indicating
      status/differences within in two side by side buffer lists
      of all the files within both directories.

   + This list of files can be navigated in a similar way you
      navigate a dired buffer...  Putting cursor on any filename
      and hitting RET key will open the two files within an
      *eDiff* session...

   + I used to use external diff/merge tools like *kdiff-3* but I
      find Emacs to be superior /(if not quite as slick GUI looking)/
      but that does not bother me in the slightest... The powerful
      user configurable functions made available within Emacs are
      /(to my eyes)/ the Beauty of Form and Function in action!

      The prase /"Form follows function/ has been misunderstood...
      
         /"Form and function should be one, joined in a/
          /spiritual union./ - Frank Lloyd Wright...

- [[https://github.com/bmag/imenu-list][imenu-list]] *Right panel Menu and Variable list*
   
   =CURRENTLY DISABLED UNTIL FURTHER NOTICE=

   You can toggle an imenu list right panel window to view
   variables, functions, headings, etc. *iMenu List* uses *iMenu*
   and displays the listing in a narrow window on the left side...

   =Note:= For some reason ~imenu-list~ is not working currently.
         There seems to be a problem with: ~window-display-buffer~
         returning nil with the classic: ~wrong number of arguments~
         error...  I am currently troubleshooting this...
         For now simply use *imenu* by typing ~C-c '~, or by typing
         the single quote character: ~'~ by itself /(when you are/
         /in/ *Xah-Fly-Keys* /command mode)/...

         When I have *iMenu-list* working again those keybindings
         will call it instead... It provides a nice side bar that
         you can navigate. The side bar stays there for you to use
         over and over again until you toggle it back off again...
         This is much better than using iMenu alone which pops up
         in HELM but goes away as soon as you use it...



** Dired Related Packages:

- [[https://github.com/thomp/dired-launch][dired-launch]] Open files directly within *dired* using default
   applications. Great for quick viewing PDF or Image files
   with your OS default viewer app! You can use
   ~dired-launch-extensions-map~ to specify, for a given file
   extension, one or more preferred applications by simply
   specifying the application as a string.
   
   =example:=
   #+begin_src elisp
     (setf dired-launch-extensions-map
           '(;; specify LibreOffice as the preferred application for
             ;; a Microsoft Excel file with the xslx extension
             ("xlsx" ("libreofficedev5.3"))
             ;; specify LibreOffice and Abiword as preferred applications for
             ;; an OpenDocument text file with the odt extension
             ("odt" ("libreofficedev5.3" "abiword"))))
   #+end_src

   =Note:= The above is for launching apps /(inline your emacs buffer)/
         but there are many ways to skin this external app launch
         business... the following commands will launch a file in
         an external application whilst your cursor is positioned
         on a file in a dired buffer: ~W~, or ~SPC i w~ in *Xah Fly Keys*
         command mode... /(Xah Fly Keys must be enabled for this/
         /leader key sequence in Commnd Mode)/ but simply typing
         upper case W is easier IMHO.


- [[https://github.com/jaypei/emacs-neotree][neotree]] Spawn a directory tree relative your current working
   directory location. You can toggle a ~neotree~ left side panel
   window from any open buffer window using a single key...
   Type: ~C-c d~ /(normal Emacs mode)/

   =Note:= I have been using bookmarks pretty nicely for a while
         now and not using this neotree feature all that much...
         but it is a quick way to navigate from your current
         buffer/location when you are NOT within dired...
         Your mileage may vary...



** TODO dev§Ops, sys§Admin, info✷Sec Related Packages:

- [[https://github.com/fourier/ztree][ztree]] - *Ztree* is a project dedicated to implementation of several
   *text-tree* applications inside *GNU Emacs*. It consists of 2
   subprojects: ~ztree-diff~ and ~ztree-dir~ /(the basis of ztree-diff)/...

   The *ztree-diff* utility configured to work nicely within *HAP Modular*
   *Emacs* and clean up afterwards... /(still workng on the clean up part ;-)/

- [[https://www.emacswiki.org/emacs/SmartTabs][smart-tabs-mode]] - Intelligent tabs to end the f***ing tabs vs
   spaces war already =OK?= Click the Link & Read the docs... :-)

   =THIS PACKAGE HAS BEEN DISABLED= Over the years I have found
   smart-tabs to be quite dyslexic and problematic.. For a while
   now, I simply disable TABs normally in Emacs and set indent
   space to 3 chars for the default... Other modes/packages have
   their own automatic ways to prettify the code... So I believe
   I am all set NOT using smart-tabs-mode going forward Q4 2022...

   =IF YOU WOULD LIKE= to enable smart-tabs-mode =THEN:=

   =Edit:= ~$HOME/.emacs.d/lisp/modules/04-devOps-pkg-conf.el~  

   and remove the coment from the line below:

   #+begin_src elisp
     (defvar me--req-devops-packages
       '(ztree
     ;    smart-tabs-mode  ;; DISABLED while exploring other options...
         ssh-config-mode
         yaml-mode
         nginx-mode
         php-mode          ;; SOON to be REPLACED
         indent-tools
         logview))
   #+end_src

   /(also un-comment any smart-tabs related configs/
    /further down the page. Search for Heading Comments)/

- [[https://github.com/jhgorrell/ssh-config-mode-el][ssh-config-mode]] - A mode to edit SSH config files. If you
   edit those files you will see nice colors of keywords etc.

- [[https://github.com/emacs-php/php-mode][php-mode]] - Major mode for editing PHP code. This just works
   on PHP files alone... I am using xah-lee configs for all
   other web, JS, Yaml, etc... Xah is working on a php-mode...
   When that is finished I will most likely adopt it to
   match all the other web modes...

- yaml-mode - 
- nginx-mode - 
- indent-tools - 
- logview - 



** Writer's & Publishing Tools:

- [[https://jblevins.org/projects/markdown-mode/][markdown-mode]] *Markdown Capability Within Emacs*. If you write for
   the web You cannot live without this...  Although I use Emacs
   org-mode for most things, /even publishing to web pages/...
   Some Web engines require content to be submitted as raw
   markdown... /(this makes that process work well)/

- [[https://github.com/ardumont/markdown-toc][markdown-toc]] *Generate a TOC in a markdown file*
   This is a simple but powerful mode to create a TOC in a
   well-formed markdown file. In other words: The generated
   TOC will be well-formed if your markdown file is also
   well formed. ;-)
   
   =Note:= I like to place my toc at the bottom, and provide a
         simple link named: `table-of-contents` or `index` and
         put that link at the top, as well as strategic places
         down within the body of the markdown file... It reminds
         me of the way we used to do a similar thing in HTML
         before Javascript enabled fancy CSS menus started
         popping up... Now we have mobile menus to contend with.
         Oh My!

- [[https://jblevins.org/projects/deft/][deft]] *Major mode for quickly browsing, filtering*, and editing
   directories of plain text notes. Created by Jason Blevins
   /(the same statistics economics professor at Ohio State who/
   /also created Emacs Markdown Mode)/ This guy is wicked clever!
   Looks like he has some nice algorithms for studying the
   cryptocurrency and smart contracts world as well! Invoke Deft
   Mode with custom Xah Fly Keys Command Mode key: ~0~

   =Note:= *Deft* is a powerful search/filtering tool and as such
         sometimes it takes a while to get results...  After
         typing a few keys if you wait too long /(before quickly/
         /finishing your query)/ it may appear that your screen
         is frozen. /(and in fact it is)/ while DEFT cranks away
         using lots of system resources to get your juicy
         results!  =No Pain... No Gain...=

- [[https://joostkremers.github.io/pandoc-mode/][pandoc-mode]] *pandoc-mode* is an Emacs mode for interacting with
   Pandoc. Pandoc is a program /(plus libraries)/ created by John
   MacFarlane that can convert a text written in one markup
   language into another markup language.

   =pandoc-mode IS CURRENTLY DISABLED= /(commented out)/ and not used
   by *HA Modular Emacs* I am evaluating whether pandoc-mode is useful
   for Emacs... Also, Pandoc Installations ARE a BEAR to install on machines which already have HUGE LaTeX packages installed!!!
   I am not currently using Pandoc /(yet)/ so I have decided to comment
   out the code for now... It can easily be re-enabled...

- [[https://github.com/rnkn/fountain-mode][fountain-mode]] For *writers, screenwriters, etc.* A markdown mode
   for dramatic arts! Fantastic!!! Fountain together with pandoc,
   allows you to do many conversions for screenplays to industry
   formats like *Final Draft* etc. but the best part is the text
   highlighting and colors make it very easy to read/rehearse dialog
   and cues right from an Emacs buffer!  Writing scripts in this
   mode is as natural as typing ~INT~ /(your line instantly turns into
   a scene heading!)_ Try it! Just start typing your script and find
   out what happens!  Modular Emacs Fountain Mode has been customized
   to use a nice looking Typewriter style mono font! It also opens up
   in olivetti mode _(next item below)_ automatically setting the line
   width to 100 chars...
   
   =Update 2020:= I am writing docs for using fountain-mode within Emacs,
                as well as providing some example drama scripts and
                instructions on how to publish them to PDF using a tool
                called Afterwriting... Stay tuned for that...

- [[https://github.com/rnkn/olivetti][olivetti]] *Olivetti Adjusts Margins With Word Wrap* /(great to use with/
   /fountain mode!)/ Perfect for distraction free writing! I also enable
   this within ~rmoo~ /(if you have the games module enabled)/. Toggle it
   on and off within *Xah Fly Keys Command Mode* by hitting the backtick
   character: ~(`)~ key... Adjust the margin width within Xah Fly Keys Command Mode by hitting: ~SPACEBAR [~ or: ~SPACEBAR ]~ to shrink or
   grow respectively.

- [[https://github.com/blak3mill3r/vmd-mode][vmd-mode]] *Fast Github-flavored Markdown previews* synchronized with
    changes to an emacs buffer /(no need to save)/.

    =THIS PACKAGE HAS BEEN REMOVED - VMD NOT SECURE!=

    After discovering the big security volunability of the NODE JS
    App *VMD* /(Visual MarkDown)/ I decided to stop using it, remove it
    from all platforms, and since I don't use it, I removed
    vmd-mode from HAP Modular Emacs configuration as well.
    I am using *org-mode* now for ALL writing operations...
    I only needed it to update previous markdown docs...
    /(this README Doc was the first to get converted ;-)/
    If I need to update any of those they get immediately converted
    to .org files as well... /(all of these HAP Modular Emacs Docs/
    /are getting an org-mode facelift while they also get updated)/

    Since I only use NODE JS to install LTS versions of JS apps
    and the only one I use now is VMD, I decided to remove ALL
    NODE JS related software from my operation.  =JS is DANGEROUS=



** Spelling:

- [[https://github.com/][flyspell-correct]] This package provides functionality for correcting
   words via custom interfaces. There are several functions for this:
      ~flyspell-correct-wrapper~
      ~flyspell-correct-at-point~
      ~flyspell-correct-previous~
      ~flyspell-correct-next~

- [[https://github.com/pronobis/helm-flyspell][helm-flyspell]] Helm extension for correcting words with flyspell.

- [[https://github.com/d12frosted/flyspell-correct][flyspell-correct-helm]] Nice helm interface for flyspell...
   Place your cursor after any misspelled word and type: ~C-;~ to
   see a list of suggestions...



** Key-bindings:

- =NOTE1:= Key Bindings are ALL defined within: ~12-Xah-Fly-Keys.el~
          AND ~13-key-bindings.el~ I have not listd them here yet,
          as many of them have changed, or need to be removed etc.
          They will most definately be listed here nicely for
          *HAP Modular Emacs V4.0* /(soon to be released)/

- =Note2:= If you type a *prefix key*: /(e.g., ~C-x~ /,/ ~C-c~ /,/ or ~M-x~ /, etc.)/
          and wait a second, =You Will See a HELM Pop Up= showing all
          the key commands available to choose from!!! *EURICA BABY!*
          This ALSO works for ~SPACEBAR~ in *Xah-Fly-Keys* command mode.
          *No guessing needed...* =The Helm Popup has a menu to=
          =navigate the whole list as well=... *Try it!!*

          /You will be using this to learn keys more than taking the/
          /time to look them up in these docs or code because it's all/
          /there at your fingertips, thanks to HELM.../



* 🎁 Optional Packages & Customization:

Now it's time to forget boring defaults and really tune this baby up to be the best *DevOps* , *PubOPs* , *Lisp IDE* that it can be!

The following doc with guide you through that process:

- [[./Docs/ModE-Optional-Packages-y-Customization.md][Modular Emacs Customization]] - Optional Packages & Customization

=Note:= These Extra Features are constantly /"a work in progress"/ as new
      options come up that work better, and other options turn out to
      be more trouble than worth... etc. etc. etc... At the same time
      I have to document all of this stuff and then revise, revise,
      revise... Many of you know this delima... %^) Org-Mode helps
      tremendously! I will be updating these extra docs after weeding
      out the dead-wood... /(which is my current task to get ready for/
      /The major release of:/ *HAP Modular Emacs V4.0* /on the horizon.../



* 📅 Begin Log:
** 📅 2023:

No Logs So far... This feature is under evaluation and may end up not being used...

** 📅 2024:

/Not Here Yet but keep logging... The New Year will be here soon enough!/

* 📋 Meta: /(Usage & Templates)/
** ⎘ Templates:
*** NEW 🗓 Generic Log Entry /(General Log Entry Template)/
<2021-03-29 Mon>
#+begin_comment

=README:=

   - *Go To One of the HEADINGS Below:* /(Summary, Details, or Sub Headings)/

      =Punch the Time Clock= At the heading And then begin working on a task related to that Heading... =Your Time IS being Recorded Now= 

   - =Use These Commands:= /as you work to keep track your time.../

      + *Clock IN:* ~C-c C-x C-i~ 

                    /(Begin OR Resume Clocking Current task)/

                    This creates a new :CLOCKING: Time Card Entry just
                    underneath the HEADING...

                    Do this just before starting work on the task... 
                    Be in control of your life!

                    After doing the above, you can go away and do some 
                    work, leaving this heading, log note, etc. to visit 
                    other files and/or work on them etc. The clock will 
                    be recording your time all the while... You will see 
                    in your mode line the elapsed clock time ticking away 
                    as you work on a task /(hopefully related to this clock!)/
                    and NOT Yac Shaving or being sidetracked!!!

      + *RETURN to Clock Heading:* ~C-c C-x C-j~

                        /Go back to the place where you started the clock.../

                        You do this after you have worked on a task for a 
                        while and you need to come back to update the item's
                        info etc., and/or stop the clock before going off to 
                        do something else unrelated to the log entry...

      + *Clock OUT:* ~C-c C-x C-o~ /(to stop clocking your time on task)/

                      This *Finalizes the Time Card Entry* within:
                      ~:CLOCKING:~ /(created earlier when you started the/ 
                      /clock)/...

                      The Clock Entry changes showing start timestamp, end timestamp, and total time worked during this segment...  

                      =Please DON'T Forget= /Like I often do, LOL.../ i.e.,
                      Leaving a clock running all day by accident, or worse,
                      leave it dangling with the file closed only to open it
                      again and get that nasty *Org-Mode Message:* /"What do/
                      /you want to do with this?"/ If you do something like 
                      that you can always come back and directly edit the 
                      clock times by hand to amend them...  After changing 
                      clock times or dates, etc... Whatever...

                      ="Onward We Row Mates... Through the log jam!"=

      + *Update Time Card Entry:* ~C-c C-c~ 

                  This command will change the total time at the end showing 
                  your new calculated time...

                  If you need to go away and do something else before finishing this task, you can do so after clocking out... When you come back simply clock back in again to start another Time Card Entry just as before... The new time card entry will appear above the earlier one within the ~:CLOCKING:~ drawer... When you clock out of this task it will look just like the entry below it with a total time worked tagged on the end...

      + *Clock Out & Mark Items Done:* ~C-c C-t~

            When you are all done with a Log Entry use the above key 
            command to mark its Heading *TODO* tag to: *DONE* /(Most of the/ 
            /time this will ALSO clock you out if you are still clocked/ 
            /into the item... But not allways in my experience.../  
            So make sure you are also clocked OUT of an Item After 
            marking it DONE... Type: ~C-c C-x C-j~ to check this...
            /(if no running clock it will tell you and place your/
            /cursor at the heading where you LAST CLOCKED OUT)/

      + ~C-c C-x C-q~ *Cancel Current Clock:* /(in case of accident)/

                      This removes currently running clock and forgets 
                      any time accrued or associated with it...

      + ~C-c C-x C-d~ *Display Clocking Info:* 

                      /This will show elapsed times to the right of headings.../
                      =Warning!= Using this command will CLUTTER ALL the headings
                                within your org file with those timestamps!!!

   - Once all of this has become routine for you, =go ahead and remove this= ~README~ =drawer from this template=... That way it does not get copied when you need to clone new log entries...

#+end_comment

This Log Entry is about: Yadda... Yadda... Yadda...

**** NEW 📚 Reference:
#+begin_comment

=README:=

   =Org Mode Links Tip:=

      + To Create a Link Type: ~C-c C-l~ 
         /(then paste: ~link~ & type: "description")/

         =-OR-= Simply Copy/Paste BOILERPLATE:
              /(use placeholders below)/
              And Fill Them In Manually... 
              Copy/Paste more placeholders as
              needed to create more links...

      + To Open a Link Type: ~C-c C-o~

      + To EXPAND a Link Type: ~SPACE b~
         or: ~M-x org-toggle-link-display~

   =BOILERPLATE:= /(clone to add more ref links)/

   ☞ *Heading:* [[~/.GIT/My-Docs/][MY DOCS]] /(comment)/

   - *Heading:* [[link][Link NAME] ] /(comment)/

   ☞ [[yt:aB1cD2eF3gH ][TITLE ] ] *Description:* /(YouTube)/

   - [[link][Link Name] ] *Heading:* /(comment)/
   
   - *_:* [[][] ] /(yadda... yadda... yadda...)/

   - [[][] ] /(_)/

   [[junk][JUNK]]  /(This is a stupid BUG workaround/ /for org-mode link/
         /expansion/compression... If you invoke:/ ~org-toggle-link-display~
         /you will notice this JUNK link DOES NOT compress to a clickable/
         /link title alone.../
         
         /I am not sure if this is due to my Emacs Config or a bug within/
         *Org-Mode* /itself.../

         /I put this workaround in here because if it is not here,/
         /SOME of your external file links created below may not/
         /compress after expansion, even though thy are GOOD links!/

         /Leaving this JUNK link in here acts like a scapegoat/
         /so that your real links below will all compress/expand/
         /normally... I am NOT SURE WHY THIS WORKS??? I'm to busy/
         /to do anything beyond hacking at this point.../
         
         ~org-lint~ /will detect JUNK above... Ignore that warning.../
                  /It's my "METHOD of MADNESS" %^)/

#+end_comment

- *Link to Project:* [[][] ] /(comment)/

**** NEW ⏱ Time Card:

#+BEGIN: clocktable :scope tree3 :maxlevel 6 :tstart "<-1w>" :tend "<+1m>" :step week :stepskip0  t :emphasize t :level t :tcolumns 3
#+END:

**** NEW 📃 Summary: [0/3]
#+begin_comment

=README:=

   This Summary is mostly to help you find things later when you cannot remember when or where is was done... If you go to the top of this file and expand all headings to show ALL content, then do a search on "~Summary:~" you will be able to quickly scroll through and scan these summaries quickly to find what you were looking for... 

   Also the *Time Card* /displayed above/ each search hit will give more clues by showing important headings you worked on...

   Below is an optional list /(that could also provide links)./ This list could be used to itemize things you worked on, but I personally find it easier to simply write a short one or two line description containing important keywords right here and nothing more. I think that is more useful...

#+end_comment

Yadda... Yadda... Yadda...

1. [X] *New Item 1:* /(this represents a completed item)/

2. [-] *New Item 2:* /(this represents a currently "radio active" item)/

3. [ ] *New Item 3:* /(this represents a new item not worked on yet)/

3. [ ] *New Item:* /(copy/clone more of these as needed)/

**** NEW 📰 Details:
***** NEW New Item 1 /(placeholder)/ [0/3]

New Item Details... Yadda... Yadda... Yadda...

Re-Purpose these as needed and Delete anything you don't need...

Add sub headings as needed...

Don't forget to clock-in to HEADINGS while you work on them...
AND... Don't forget to Clock OUT when you are DONE... %^)

***** NEW New Item 2 /(placeholder)/ [0/3]

New Item Details... Yadda... Yadda... Yadda...

Re-Purpose these as needed and Delete anything you don't need...

Add sub headings as needed...

Don't forget to clock-in to HEADINGS while you work on them...
AND... Don't forget to Clock OUT when you are DONE... %^)

***** NEW New Item 3 /(placeholder)/ [0/3]

New Item Details... Yadda... Yadda... Yadda...

Re-Purpose these as needed and Delete anything you don't need...

Add sub headings as needed...

Don't forget to clock-in to HEADINGS while you work on them...
AND... Don't forget to Clock OUT when you are DONE... %^)
