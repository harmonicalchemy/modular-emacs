# -**- mode: org; coding: utf-8 -**-
#+TITLE: README
#+TEXT: Copyright ¬© 2021-2025 by Harmonic Alchemy Productions & Others
#+AUTHOR: Alisha Awen - Harmonic Alchemy Productions (HAP)
#+EMAIL: harmonicalchemy@proton.me
#+DATE: {{{time(%A %Y-%b-%d)}}}
#+TEXT: Created: <2021-07-22 Thu>
#+TEXT: Last Published: <NOT Published>
#+FILETAGS: README HAP_Mod_Emacs

#+DESCRIPTION: MAIN README Doc for Harmonic Alchemy Productions - Modular Emacs... This File is NOT intended to be exported to PDF... It is for VIEWING on GitHub.com and Emacs Org-Mode ONLY...

#+SETUPFILE: ./Docs/pubOps/org-templates/default-tags.org
#+SETUPFILE: ./Docs/pubOps/org-templates/gen-doc.org

#+NAME: fig:HAP-Mod-Emacs-Banner-001
#+CAPTION: HAP - Modular Emacs Page Banner
#+ATTR_ORG: :width 700px
#+attr_html: :width 700px
#+attr_latex: :width 700px
[[file:./Docs/media/Modular-Emacs-Github-Banner-v3.png]]

#+begin_quote
   *NOTE:* Skip to: [[#-tldr---start-here][‚òû TL;DR - Start Here:]] if you are ready to install Modular Emacs *NOW* Skipping over Introduction, History, Purpose, etc... i.e., You just need to get all this going asap! :trollface:
#+end_quote

* üí° Introduction: 

*Welcome to Harmonic Alchemy Modular Emacs* ~V3.6.4 (point release) [Q3-2025]~

#+begin_quote 
*Note:* Current Status & Release Notes of this Project are Documented [[./Docs/ModE-Current-Status.org][HERE]] 
#+end_quote

*Modular Emacs* provides a simple method of dispatching your emacs configuration in steps based on initial choice of modules starting with essentials loading first, and then loading optional user chosen modules...

There are module configurations for: *Dev‚ô∫Ops* other configurations for *Pub‚úéOps* and yet others for üé• *MultiMedia* workstation *IDE* tasks. Or... ALL the Above completely capable of running on older but reasonably powerful *laptops/desktops* /(that would otherwise be considered legacy by most other standards)/.  

In Addition *org-mode* based *Document Templates* are being designed, /(ALMOST OUT OF BETA... i.e., this styling stuff takes longer than putting on makeup for sure! üíã)/ which when exported via LaTeX, produce the fineset quality typeset PDF or eBook docs which can be printed as professional hard copy books, or used with eBook readers for a quality reading experience... See: [[#active--screenshots][ACTIVE üì∏ Screenshots:]] BELOW to see examples... /(images to be added later when I finally have some decent things to show - lol)/

Publishing via org-mode/LaTeX is being made as simple as possible, starting with these templates, allowing individual writers to immediately dive into professional publishing and independent book selling without depending on outside typesetting or publishing firms...

Emacs Org-Mode also makes it possible to do [[https://en.wikipedia.org/wiki/Literate_programming][Literate programming]]... Many of the templates being designed here show examples of this and other nice tricks to empower you as an individual writer, programmer, musician, whatever!

I am a systems architect, dev‚ô∫Ops engineer, computer üíª scientist, composer üéº musician, sound üéß designer, writer üìö publisher. I wear a lot of hats! üé© My Emacs needs to wear a lot of hats as well! The central focus of *Modular Emacs* is to build empowering features into *Emacs* utilizing a modular framework that facilitates all the above without becoming an over complicated mess to manage! /(i.e., "Emacs Bankruptcy")/ "*Good Luck With That*" :octocat:

We are still in V3 BETA /(point release mode)/ as many changes are still being made to the LaTeX export configurations... and many changes are being made to improve Emacs operations, /(i.e., some unruly packages were removed and replaced with more respectful packages that do the job precisely without going way out on a NON EMACS limb)/...

So far the Log Book Template Exports NICELY! /(Real World Cases may have a few glitches depending on your included content and added formatting of course)/ The Fiction Book Template Was Nice but Now I am reworking it and am back to problems again.. Darn! The Reference Book is also exporting nicely... This README file is based on the ~HAP_README-Doc-Skeleton.org~ Template which is designed not to be a PDF but fine as HTML and GREAT on GitHub rendered As-Is /(with a TOC)/...

When ALL of these org-mode export design changes are done, AND ALL existing Document Templates in the PubOps folder are producing nice looking PDF docs, the V3 beta period /(point release)/ will end and that COMMIT will be tagged as the NEW *Official HAP Modular Emacs V4.0 Release*...

These ORIGINAL README files are being converted from markdown to ~.org~ files /(starting with this MAIN README)/ which IMHO is a more professional way to document... Github renders ~.org~ files to html nicely, and you can add a *TOC* that renders nicely as well...

All the rest of the markdown files within the Docs directory are being updated one at a time... TBD...

* üîñ Contents:                                                       :TOC_3: 
- [[#-introduction][üí° Introduction:]]
- [[#-history--purpose][üìú History & Purpose:]]
- [[#-try-harmonic-alchemy-modular-emacs][‚òû Try Harmonic Alchemy Modular Emacs:]]
- [[#-microsoft-windows-support-needed][‚öô Microsoft Windows Support Needed:]]
- [[#-my-commitment][üôè My Commitment]]
- [[#active--screenshots][ACTIVE üì∏ Screenshots:]]
- [[#-tldr---start-here][‚òû TL;DR - Start Here:]]
     - [[#-requirements][‚úÖ Requirements:]]
          - [[#-clone-this-repository][‚éò Clone This Repository:]]
          - [[#-install-emacs][üõ† Install Emacs:]]
          - [[#-nodejs---nvm--npm-removed][üö´ NODE.js - NVM & NPM: /(REMOVED)/]]
          - [[#-multimarkdown--mmd-mode--removed][üö´ MultiMarkdown & mmd-mode:  /(REMOVED)/]]
     - [[#-optional-extras][üéÅ Optional Extras:]]
          - [[#-pandoc][üõ† Pandoc:]]
          - [[#ìÇÄ-fonts][ìÇÄ Fonts:]]
          - [[#-python--pip][‚ñû Python & Pip:]]
          - [[#extra-for-experts---latex][Extra for Experts - LaTeX]]
          - [[#-graphviz][üìà Graphviz:]]
-  [[#prepare-modular-emacs-for-first-run][Prepare Modular Emacs for First Run:]]
     - [[#-initial-house-keeping-before-we-move-in][üè† Initial House Keeping: /(before we move in)/]]
- [[#-ready-set-go-start-up-modular-emacs][üì¢ Ready Set Go! Start Up Modular Emacs:]]
- [[#-usage][üé® Usage:]]
     - [[#managing-your-git-repo][Managing Your Git Repo:]]
     - [[#blackboard-color-theme][Blackboard Color Theme:]]
- [[#-default-package-features-built-in][‚úÖ Default Package Features: /(built in)/]]
     - [[#default-emacs-welcome-screen-scratch-buffer][Default Emacs Welcome Screen: /(~*scratch*~ buffer)/]]
     - [[#miscellaneus-packages][Miscellaneus Packages:]]
     - [[#core-emacs-system-related-packages][Core Emacs System Related Packages:]]
     - [[#emacs-helm--extras][Emacs Helm & Extras:]]
     - [[#tree--menu-related-packages][Tree & Menu Related Packages:]]
     - [[#dired-related-packages][Dired Related Packages:]]
     - [[#devops-sysadmin-infosec-related-packages][dev¬ßOps, sys¬ßAdmin, info‚ú∑Sec Related Packages:]]
     - [[#writers--publishing-tools][Writer's & Publishing Tools:]]
     - [[#spelling][Spelling:]]
     - [[#key-bindings][Key-bindings:]]
- [[#-optional-packages--customization][üéÅ Optional Packages & Customization:]]

* üìú History & Purpose: 

The history of *Harmonic Alchemy Modular Emacs* is like a confusing *Adventure* through many little twisty passages, all alike... /(or all different)/ [[./Docs/ModE-History.org][Everything is Documented Here Now]]  Read it at your leasure. It provides some perspective, insight, and purpose behind how and why things are done here in the present time.

* ‚òû Try Harmonic Alchemy Modular Emacs: 

For those of you who feel [[https://github.com/harmonicalchemy/modular-emacs][Harmonic Alchemy Modular Emacs]] may be exactly what you were looking for, By all means... Lets Dive in!

There are some external requirements... It may take a while... If that's OK with you, Great!... Lets go...  Eventually I will script this up so you can just enter this at the command prompt: ~./install.sh~ and be done with it... Keep your fingers crossed on that but don't get your hopes up... I am a busy girl!!! :octocat:  That script will have to install a lot of things! It will have to check a lot of system states!  I have to work all that out as a non-interactive process.  It should install everything /(transparently non-interactively)/ from that single running shell script...  If you have to answer questions and make decisions... Better that you execute manually instead, and read the docs first... AND These Docs need a HUGE UPDATE and IMPROVEMENT Right? Always...

* ‚öô Microsoft Windows Support Needed: 

=Hello MS Windows Veterans...=

I admit to having no experience at getting a nice Emacs GUI environment running nicely on MS Windows, as I am a Hard Core Mac user and have not used a MS Windows box since Win-XP days... LOL and I never upgraded to that VISTA crap either...  Thank Goddess!

I am sure the newest latest greatest MS Windows (10 now?) is Awesome!!! I just don't use it... sorry...
      
*Harmonic Alchemy Modular Emacs* expects to be installed on a Linux or BSD machine, or unix friendly machine contaning standard unix apps and utilities or proper hooks into such things... Many of these may not be implemented within the canonical Windows OS model and I have no experience sorting that out...

It is hard enough to get Mac OS to behave along side GNU Linux or other free software and open source standards!

I do not wish to abandon MS Windows users however. So I dedicated a document within Harmonic Alchemy Modular Emacs to record any information needed to help get Modular Emacs running on MS Windows.

Please consult: [[./Docs/ModE-Note-2-MS-Windows-Users.md][Note for MS Windows Users]] for more information...

I am looking for a good MS Windows Sys Admin type to jump in here and help... Where are you??? Please open an issue with intro to yourself for me to review... Thanks!

For the rest of us... For now... Let's learn this together... Please provide any feedback about your experience attempting to install this on a MS Windows box, Please open issues, ask questions!  We will get this part done some how... Thanks ;-)

* üôè My Commitment 

#+begin_quote 
   "Always do what is right. It will gratify half of mankind and astound the other." - Mark Twain
#+end_quote 

One of the main purposes of this project is to empower lots of creative folks out there who have more brains than money.  This project is 100% free software, Free to download, install, and use independently, /(both as in "Free Beer" and also as in having "Freedom of Choice and Control" over your Computing Infrastructures)/

I have been testing this project to see if it can successfully run on older legacy hardware as well. My aim is to make it possible for anyone, no matter what their economic or social status is, to be empowered to use this POWERFUL TOOL called EMACS...

To =GIVE YOU a VOICE=, to =GIVE YOU MORE CONTROL= over your digital life operations and creations. To provide you with a future proof portable/inexpensive way to publish your ideas, stories, projects for the rest of the world to see...

*Harmonic Alchemy Productions - Modular Emacs* is NOT some cheap publishing tool, but an entire arsenal of professional publishing and project management tools, ALL "free Software -or- open-source", ALL under your independent and private control /(No Middle Men Dictating Rules, no "share cropping")/..

I am committed to making this *process/journey* as painless as possible for you as I have found many other Emacs setups to be way to complicated to make it easy for adoption into my workflow, and you are probably experiencing the same!

On the other end of the spectrum... Installing basic Emacs alone is not enough to get you started _(IMHO)_...  I made a few tweaks to the Emacs Basic Operation to get you up and running with a simple setup that works well out of the box...

You will quickly outgrow that initial setup however, and will certainly want to enable some extra features you are learning about! =WARNING!= This is where Danger can lurk if you are lulled into installing something that is pure CRAP!  Trust me on that... Don't fall for the hype... Check it out thoroughly before using.  Are there a LOT of Stack Exchange posts about that package? That's a red üö© flag...

I hope to make this process of discovery reasonably easy to do for you! The whole purpose of this project is to be able to easily grow and shrink features as needed in any combination thereof... Without getting lost in a tangled mess of twisty little passages all alike! /(or different)/

If you end up liking *Harmonic Alchemy Modular Emacs*, please drop me a note to let me know! Please do ask questions, open issues, etc. Thanks! I have been using Emacs since around 1986/87 /(OMG that long! off-and-on with gaps in between ;-)/ but I never shared any of that Emacs knowledge with anyone before now... üíú üíú üíú

=Therefore:= *Here is Modular Emacs!* I hope my long years of *devOps* experience will turn out a nice jewel for new comers to try out and succeed with! *Good Luck and God Speed!*

* ACTIVE üì∏ Screenshots: 
<<README_screenshots>>
=Misc. Screenshots displaying HAP Modular Emacs main Features=



=General LOG Book TEMPLATE (details Section)=
#+NAME: fig:HAP-Mod-Emacs-gen-log-book-details-001
#+CAPTION: HAP - General LOG Book (Details Section)
#+ATTR_ORG: :width 600px
#+attr_html: :width 600px
#+attr_latex: :width 600px
[[file:./Docs/media/HAP-General-LOG-Book-details-01.png]]

=Viewing The General Log Book TIME CARD=
#+NAME: fig:HAP-Mod-Emacs-log-book-time-card
#+CAPTION: HAP - Viewing General Log Book TIME CARD
#+ATTR_ORG: :width 600px
#+attr_html: :width 600px
#+attr_latex: :width 600px
[[file:./Docs/media/HAP-LOG-Template-Time-Card_2025-007-01.png]]

- [[file:./Docs/media/HAP_General-Log-Book-Skeleton.pdf][PUBLISHED LOG Book PDF]] /(Published Example General Log Book Skeleton)/ 

  Open this PDF file and examine it.. /(not a screenshot)/

=Audio Drama Project Skeleton Template=
#+NAME: fig:HAP-Mod-Emacs-audio-drama-project-template
#+CAPTION: HAP - Audio Drama Project Skeleton Template
#+ATTR_ORG: :width 600px
#+attr_html: :width 600px
#+attr_latex: :width 600px
[[file:./Docs/media/HAP-Audio-Drama-Project-Skeleton-02.png]]

- [[file:./Docs/media/The-Coffee-Shop.pdf][The Coffee Shop - Audio Drama Script]] /(Published Audio Drama Script)/ 

  Open this PDF file and examine it.. /(not a screenshot)/

=Reference Book Project Skeleton Template=
#+NAME: fig:HAP-Mod-Emacs-ref-book-project-template
#+CAPTION: HAP - Reference Book Project Skeleton Template
#+ATTR_ORG: :width 600px
#+attr_html: :width 600px
#+attr_latex: :width 600px
[[file:./Docs/media/HAP-Reference-Book-Project-Skeleton-01.png]]

=dev‚öíOps Workflow Showing Mod Emacs on BOTH Local Mac & Remote Server!=
#+NAME: fig:HAP-Mod-Emacs-devOps-workflow
#+CAPTION: HAP - devOps Workflow Showing Mod Emacs on BOTH Local Mac & Remote Server!
#+ATTR_ORG: :width 600px
#+attr_html: :width 600px
#+attr_latex: :width 600px
[[file:./Docs/media/devOps-Workflow-using-HAP-Mod-Emacs-2024.png]]

* ‚òû TL;DR - Start Here: 

Follow the steps below /(in a top down fashion beginning with "Requirements:")/ to install: *Harmonic Alchemy Productions - Modular Emacs* for the first time...

Do not skip to the /(optional)/ install guides until you have the basic default configuration of Modular Emacs installed and running /(without errors)/ in your home directory...

#+begin_quote 
*Note:* It is entirely possible that Modular Emacs will run reasonably without enabling many of the basic modules listed below. Starting bare bones like that may be a good way to get your feet wet without running into initial problems or having to install many required externals, all at once... Later, when you have a better handle on this, try installing some of the extra requirements, /(like a FULL LaTeX Package)/ and then enabling some of the more advanced modules...
#+end_quote

** ‚úÖ Requirements: 
*** ‚éò Clone This Repository: 

Clone this repository into your ~$HOME~ directory as: ~me.init.d~. The ~me.~ prefix /(for Modular Emacs)/ is put there so that it will not overwrite your existing ~$HOME/.emacs.d~ directory /(if you already use Emacs, which you will still need operational)/.  We will rename this folder later after all other requirements are complete...

Issue the following command within your default *terminal* application:

#+begin_src bash 
  git clone https://github.com/harmonicalchemy/modular-emacs.git ~/me.emacs.d
#+end_src 

After the above is done, leave things here as they are and go do the rest of the steps below... We will come back to this later when we are just about ready to launch *Harmonic Alchemy - Modular Emacs* for the first time...

*** üõ† Install Emacs: 

- =UPDATE:= <2025-04-06 Sun> *No Need to Build Emacs from Source ANYMORE:*

  on MacOS, or ANY OS... In the old days I found it hard to get the proper Emacs Build for MacOS with all the correct tools installed etc... /(like it is on NX machines)/...

  So I created a procedure to build Emacs from the GNU repository directly... That was a cool thing back in the day but today I have a GAZILLIAN OTHER THINGS to take care of and MacPorts / Homebrew etc. have got all that together now... Much better than before...

Here is a LINK to =MacPorts Build/Install Options:= [[https://ports.macports.org/port/emacs-mac-app/details/][MacPorts: emacs-mac-app]]
I don't use Homebrew anymore so someone else needs to pipe in about that... There are many links on the web for Homebrew Emacs on Mac though... You will need an Emacs built with image support including svg... Also Graphviz support, and a few other things I forgot.. /(you will find out)/ So Good Luck! 

=Follow INSTRUCTIONS Below with the ABOVE UPDATE in Mind:=

Many of the default packages installed with this project will not work with older versions of Emacs. Also the security older Emacs packages is horrendous! Recently, some of the older packages were removed from the updated MELPA and moved to other less-secure repositories. The entire MELPA site is TLS enabled now but these other repos are not very secure...

Updated features /(acquired securely)/ are vital for being reasonably safe going forward from 2020 onward...  Therefore, I decided not to support versions of Emacs prior to V26 and prefer to only support Emacs V26.1 and up...  

#+begin_quote 
=Warning!= If you have a really old version of Emacs currently installed, it may break after you update Emacs below... Therefore before installing a brand new version of Emacs it may be a wise idea to save your current emacs environment, e.g., ~.emacs~, ~$HOME/.emacs.d~, etc... as well as a copy of your old *Emacs* Application...

This is for a safety net, Do NOT delete your existing setup... You still need your existing Emacs working wile you are getting all the requirements below together for Modular Emacs... 
#+end_quote 

- [ ] *Copy/Clone your entire:* ~$HOME/.emacs.d~ directory 

  and/or ~$HOME/.emacs file~, as well as a copy of your old *Emacs* application into a temporary directory of your choice before upgrading below... /(or compress/ /and make a/ ~.zip~ /or/ ~.gz~ /archive file)/

  This will be your safety net for coming back later if you decide you are not ready to upgrade. If anything goes wrong, you will be able to reverse everythig back no problem!

- [ ] *Once your house is in order as above:* /(OPTIONAL)/ 

  [[./Docs/ModE-Install-Emacs.md][Click this Link to Build or Install Emacs 26+ on Your Platform]] 

*** üö´ NODE.js - NVM & NPM: /(REMOVED)/ 

Previous versions of Harmonic Alchemy Modular Emacs required installing *NODE Version Manager* ~NVM~, and *Node Package Manager* ~NPM~, so that we could use the *Visual MarkDown application* ~VMD~ as a *WYSIWIM* /(what you see is what I mean)/ editing environment for *Markdown* files within Emacs...

I have decided to abandon *VMD* due to a critical security volunerability which has been discovered. I was late to getting around to mitigating this problem... Since Harmonic Alchemy Modular Emacs only needed that single NODE JS applicition, I have decided to remove the entire NODE JS elephant so that it is no longer required...  You should NOT install NODE JS unless you are a dedicated JavaScript developer, and then you need to be extra careful about what apps from other devs you may wish to install...

#+begin_quote
"It's a jungle out there, makes me wonder how I keep from going under!" - GMF
#+end_quote

I recommend installing Ocular on Linux, and use Mac OS built in Preview to see your markdown files rendered for reading normally etc. I am no longer writing docs in Markdown as you can see this README file is now written in Org-Mode... Github displays .org files great and you can even have a Table of Contents!

So going forward with Harmonic Alchemy Modular Emacs we will be doing ALL our docs from now on in org-mode and taking advantage of the nice org-mode features I have tweaked and beautified for Writers, Authors, Coders, i.e., anyone tired of plain jane org-mode appearances...

*** üö´ MultiMarkdown & mmd-mode:  /(REMOVED)/ 

*Multimarkdown* and ~mmd-mode~ are NO longer required or configured for use by *Harmonic Alchemy Modular Emacs*...

As above for NODE JS and VMD, I have decided to remove this old ancient emacs mode which I had to clone and modify to get it working in newer versions of emacs... I removed external multimarkdown requirements as well... 

I am no longer using Markdown as my go-to doc format for anything except WebSites which require content to be delivered that way, AND in Fact Org-Mode publishes directly to HTML anyway so Forget It! Needless to say I don't need this extra Markdown stuff that was only originally needed for Github... Normal emacs Markdown mode works great by itself... *Pandoc* /(optional package below)/ is a much better universal Swiss army knife for converting from one format to another than multimarkdown as well...

** üéÅ Optional Extras: 
*** üõ† Pandoc: 

*Harmonic Alchemy Modular Emacs* will run fine without Pandoc installed on your machine, and in fact is not even used internally... Pandoc exists as an external tool you may need from time to time to convert from one format to another when *Emacs* or *Org-Mode* cannot perform the same thing internally...

Therefore, instructions for getting Pandoc installed on your platform are included here but it is not required for operation... It is /"Extra for Experts"/ 

*Read the docs for Pandoc* to decide how to use them. More instructions for installing and using Pandoc can be [[https://pandoc.org/installing.html][found on the Pandoc Official Website]]...

The [[Pandoc.org]] website has most everything you will need all in one place!

[[./DOCS/MODE-INSTALL-PANDOC.MD][FOLLOW THIS LINK]] to Harmonic Alchemy Modular Emacs' Pandoc Install Guide /(All Platforms)/

*** ‚åò Fonts: 

*Harmonic Alchemy Modular Emacs* recommends a few fonts to be installed on your system to get Fancy Org-Mode, Fountain Screenplay, and coding frames/windows/mode-lines, etc. looking as good and "readable" as they possibly can.

=HOWEVER THIS IS NOT A REQUIREMENT for PROPER OPERATION=

You may or may not be fine with the fallback default fonts if the fonts below have NOT been installed on your machine... I have not tried defaults so your mileage may vary...

Other fonts will be required by *LaTeX* /(for exporting to external document types)/. That process will be covered in a seporate doc and as well is also not entirely "required" for proper operation of Harmonic Alchemy Modular Emacs.

For Instructions on how to install modular emacs recommended fonts on All Platforms, [[./DOCS/MODE-INSTALL-FONTS.MD][FOLLOW THIS LINK]]... Afterwards, you will see some nice looking "writers" fonts in Org-Mode as well as while editing Fountain drama scripts! :octocat:

*** ‚ñû Python & Pip: 

Some of the newer /(OPTIONAL)/ modules to be enabled within *Harmonic Alchemy Modular Emacs* will require Python packages to be installed... This is especially true of *Emacs MultiMedia System* ~EMMS~ which is enabled within optional module: [[./lisp/modules/11-external-integrations-conf.el][11-external-integrations-conf.el]]

[[./Docs/ModE-Install-Python-PIP.md][FOLLOW THIS GUIDE]] to get *Python & PIP* set up within your local environment so you will be ready when python packages are needed to be installed now, or later...

*** Extra for Experts - LaTeX 

No I did not forget *LaTeX*...  This is a powerful monster! It needs its own monster doc to install and configure as well... You need it to work with *Pandoc* as well as *org-mode* to take atvantage of advanced export options of included example Org-mode Doc Templates within the PubOps Section...

LaTeX provides extended features to produce PDFs, and eBook formats... Emacs can be integrated, (especially ~org-mode~) to be able to export to these fancy formats using LaTeX...

This is Great News if you would like to make *Emacs* work as well as /(or better than)/ *Scrivener*... So get on it already OK?

- [ ] =Install Optional LaTeX Publishing Environment:= [[./DOCS/MODE-INSTALL-LATEX-PUBOPS-ENV.MD][FOLLOW THIS GUIDE]]...

*** üìà Graphviz: 

Harmonic Alchemy Modular Emacs is =OPTIONALLY= configured to use the popular *Graphviz utility*, allowing the creation of nice graphs, flowcharts, data diagrams, etc. using a powerful scripting language called *dot*...  The Emacs mode for Graphviz is: ~graphviz-dot-mode~

Modular Emacs invokes: *graphviz-dot-mode* /(independent of whether graphviz is actually installed on your system)/ when you visit files ending in either: ~.dot~ or ~.gv~ Emacs will format these files nicely for you... But you cannot execute them unless you have Graphviz installed externally...

If you DO have Graphvix installed... When you visit a ~.dot~ file, you can compile it with: 
~C-c C-c~ which will produce an ~.svg~ file along side...  By default, Modular Emacs is configured to produce *SVG* vector files instead of ~.png~ files which is my preference because if you export and then view it as a PDF you can expand the resulting rendered chart or graph full screen and it will still look very sharp! Not to mention you can edit the resulting SVG file within *inkscape* to add things to it that Graphviz cannot...  Don't underestimate the power of *Graphviz* though! [[https://graphviz.org/documentation/][READ THE GRAPHVIZ DOCS!]]

- [ ] =To Install Graphviz - All Platforms:= [[./Docs/ModE-Install-Graphviz.md][FOLLOW THIS LINK]] 

*  Prepare Modular Emacs for First Run: 
** üè† Initial House Keeping: /(before we move in)/ 

- [ ] *Create an empty file:* ~custom.el~ 

  This file keeps *Emacs Internal "Customize"* saved settings separate from *Modular Emacs constructs* and outside of your ~.init.el~ file! /(so you won't have to worry about tiptoeing over it)/ Emacs will use this file /(initially empty)/ behind the scenes to save your Emacs internal "customizations"... Git ignores this file. /(Which is why we have to create it here now)/ You will not need to mess with this file after creating it, /(unless you want to/ /empty it out and start over when Emacs "customized" things get/ /out of hand)/...

  =Create Empty ~Custom.el~ File:= 

  #+begin_src bash
    touch ~/me.emacs.d/custom.el
  #+end_src

- [ ] *COPY/CLONE:* ~me.init.el~ *to:* ~init.el~ 

  ~me.init.el~ is a template for reference only...  I did it this way, adding: ~init.el~ to: ~.gitignore~ for the purpose of providing more flexible ways to manage your local install of Modular Emacs... ~me.init.el~ will stay in sync with the remote origin while your local clone: ~init.el~ runs the show /(with any changes you might add)/ without triggering git to complain about new un-tracked files etc...

  #+begin_src bash 
    cp ~/me.emacs.d/me.init.el ~/me.emacs.d/init.el
  #+end_src

  Later... You may want to edit your fresh new ~init.d~ and change the Banner Message to be more specific to your installation... Also, later we will discuss different strategies of management that will hopefully allow you to build your own setup concurrently and in harmony with Modular Emacs, and be able to easily share any extra features/modules of your own that you may wish to bring to the rest of the Modular Emacs user community!

- [ ] *FINAL STEP - Make Modular Emacs Folder the DEFAULT* ~$HOME/.emacs.d~ *Folder:*  

  At the very beginning of this guide, you were advised to copy your existing Emacs setup first. I hope you did that because now you are going to over-write your old installed Emacs configuration with Harmonic Alchemy Modular Emacs! 

  Therefore if you did not backup, FIRST make sure to rename /(save)/ your existing: ~$HOME/.emacs.d~ to: ~$HOME/save.emacs.d~ /(if you did not do/ /this in the beginning)/ You may also have a ~.emacs~ init file outside of the ~.emacs.d~ folder that also needs to be renamed! =This is very important!= Becase the next steps will overwrite them if you did not change their names!!!

  Now you are ready to rename: ~$HOME/me.emacs.d~ to: ~$HOME/.emacs.d~ 

  #+begin_src bash 
    mv ~/me.emacs.d ~/.emacs.d
  #+end_src

~$HOME/.emacs.d~ is now your new *Modular Emacs Local Repository* which is also now your default *emacs* home directory!

=One last sanity check=... Make sure you no longer have a ~$HOME/.emacs~ file still in your home directory...  You should now only have a: ~$HOME/.emacs.d/~ directory and that's the only "emacs" in your
~$HOME~ OK? Great! :octocat:
     
* üì¢ Ready Set Go! Start Up Modular Emacs: 

- [ ] *Start up GNU Emacs:* 

  Envoke Emacs either from the menu or command line and hold your breath! After a lot of super computing lisp number crunching flashing away in your mini buffer /(wait wait wait... for a/ /BUNCH of packages to download and compile the first time,/ /which can take up to a minute or more!)/ After that startup should take no more than 5 or 6 seconds at most unless you have some huge new package that needs to be installed...

  After your long wait... *Bam!* You should see your new emacs screen pop up with *Welcome to Harmonic Alchemy Modular Emacs!* heading your scratch buffer in a frame with a pre-determined row/column initial size! 

  =NO?= *It's Broken?* Oh My! ü§¶‚Äç‚ôÄ =What a freaking let down!= *I feel your pain!* OK... Don't worry if all you see are only numerous compiler warnings... /(those are hard to avoid upon first startup with/ /all the new packages compiling etc. Not much you can do about/ /that... The developers who made the packages need to clean/ /that up, you could help them though. You can safely kill that/ /message buffer and move on.)/...

  =Yes?= *It worked?* =Yay!= ‚òï What a fantastic feeling the first time eh?

  #+begin_quote 
=Note1:= I am still chasing an OLD issue with some functions, /(not mine)/ calling the old depreciated ~cl~ /(common lisp/ /library).../ These will be replaced with calls to the new ~cl-lib~ replacement... When that happens you will no longer see the warning: *"cl lib is depreciated"* at startup...  There are several other warnings like this I will eventually chase down as well... 
  #+end_quote

It is hard to keep Emacs Lean and Mean with all these *seat-of-the-pants developers* building packages that pull in gigabytes of *FLUF* just to provide some stupid silly function that you can do in three lines by yourself! *FLUF* = "Fluf is Lousy Unnessary F**ks**t!" /(R-rated Recursive Acronym inspired/ /by: Xah Lee & Having to live with F**king GNU)/

If you got an error that halted completion part way thorugh, and you have an incomplete emacs startup init screen, try to retrace your steps or try running emacs with ~--debug-init~ turned on... It's probably something dumb and easy to fix...

/(This happens to us all the first few times, and comes back again/ /later as well most of the time.  Other errors only come up in a blue/ /moon, and then mysterously go away and hide before you can catch/ /them! DOH! Compiler Logs are a hacker's best friend)/ :trollface:

#+begin_quote
=Note2:= Fetching/pulling new changes

from the master ~modular-emacs~ GitHub repository to your local ~/.emacs.d~ directory will automatically be reflected within your emacs configurations... No need to copy any more files... But you may be surprised to see some new feature or something working differently. If that bothers you, you may wish to keep your changes separate from the remote master branch.  Therefore create your own local ~test~ branch /(or call it what you like)/ and maintain your local changes in parallel... Change your local branch's .gitignore to accommodate your needs...
#+end_quote

#+begin_quote 
=Note3:= The remote ~modular-emacs~ Github repository also maintains a ~develop~ branch where new ideas and features are tried out before folding them into the master branch which maintains the Modular Emacs stable release.

You could also create a local branch that tracks origin:develop if you would like to participate in any new things I am trying out before final release... Earlier point versions of Modular Emacs were first staged and tested within the develop branch.

Version 3.x.x are tested on the develop branch. /(if not already merged into master by now)/...

Any time a final release of new features is ready, the develop branch will be merged back into master branch, tagged as a new point release /(or major release when a lot of new features have been/ /added to warrant it)/... maybe not this time eh?  LOL 
#+end_quote

#+begin_quote 
=Note4:= I have created a new branch called: ~xah-fly-keys~ where the optional module: ~12-Xah-Fly-Keys.el~ has been enabled by default. You don't have to make any modifications in order to try this otherwise optional feature when you are on this branch. Try it out! It's easy to switch back and forth now...
#+end_quote 

* üé® Usage: 
** Managing Your Git Repo: 

The *Harmonic Alchemy Productions - Modular Emacs* git repository is configured to ignore your local ~$HOME/.emacs.d/init.el~ file... The file: ~$HOME/.emacs.d/me.init.el~ is kept in revision and you do not use or touch this file directly...  Instead, your standard emacs config file: ~$HOME/.emacs.d/init.el~ starts out as a clone of ~$HOME/.emacs.d/me.init.el~ allowing you to try out new things on the fly without upsetting the state of the git repo...

*HAP - Modular Emacs* is configured this way for some good reasons...

   1) *First*, it allows you to return to the default setup easily in case you mess up your ~.init.el~ file somewhere along the way...
      
   2) *Secondly*, this file is intentionally kept very simple... There are NO implementations there... Instad ~.init.el~ calls a *Module Dispatcher* ~dispatcher.el~ and that file is responsible for dispatching /(loading)/ the entire emacs configuration /(modules)/ for *HAP - Modular Emacs*...
      
   3) *Thirdly*, It makes it =SUPER EASY= for you to disable your current *HAP Modular Emacs* in order to try some *OTHER Emacs Configuration* you may have wanted to try out. /(without too much trouble)/ right
      in place without hurting your current HAP Modular Emacs Setup... Going back simply involves renaming the associated ~init.el~ file, and replacing it with the original, or visa-versa...

Feel free to use your ~$HOME/.emacs.d/init.el~ /(clone)/ to try out experimental customizations or tests. =HOWEVER=... *There are BETTER Ways to customize HAP Modular Emacs* leaving your ~.init.el~ as is... /(other than changing the/
/boilerplate heading that gets displayed to suit your fancy)/ This is the
purpose of ~dispatcher.el~ and the ~my-modules~ directory...

You can also use the Emacs *scratch* buffer to paste experimental lisp code to try out before making it permanent as a stand alone ~.el~ emacs lisp file, /(as the welcome banner suggests ;-)/. Evaluate the entire ~*scratch*~ buffer without needing to remove the banner message at the top as that message is one huge lisp comment... If something horrible happens, no worries... Simply restart emacs... Your mess-up will be gone and you will be back to where you were before you or that elisp test code goofed up...

If your customization proves stable, and you like it, you could then save your scratch buffer (as is) to a new file, for example:

   ~$HOME/.emacs.d/lisp/my-modules/xx-my-new-module.el~

In all cases you would also be wise to also create and checkout your own private local ~test~ branch /(call it what you wish)/ and keep all your custom changes in there separate from the ~master~ or ~origin:develop~ branch...

The directory: ~$HOME/.emacs.d/lisp/my-modules/.~ is NOT tracked by *git*... So you can put anything in there without upsetting your local or remote tracking branches... 

=ALSO= if you copy any of the files from: ~$HOME/.emacs.d/lisp/modules/.~ to ~$HOME/.emacs.d/lisp/my-modules/.~ They will OVERRIDE the ones in ~modules~ and will NOT be tracked, SO you can try out mods within ~my-modules~ without messing up your current git status...  If something goes wrong, simply delete or rename your clone within ~my-modules~ and you will be back to where you were before... Easy Peasy.. /(this all works in a similar way to how the oh-my-zsh repository behaves for local ZSH configurations)/

You can even *clone OTHER git repos* wihtin ~my-modules~ without messing anything up! This is better than using lousy sub repos /or what ever that is called/... I tried using git sub-repositories once and then ran for my life scared as shit after that initial crappy experiece!  LOL "What were you guys smoking when you created that mess?" Alisha is very opinionated about some things eh? RIGHT!

** Blackboard Color Theme:  

*HAP Modular Emacs* comes with my new customized version of the *Blackboard color theme* /(patterned after the famous Textmate Blackboard Theme)/ which I like for the *pedagogic essence* it inspires... I have also tweaked it to look good under my *Fancy Org Mode* colors and faces.  If you would like to add more custom themes or a different theme than ~blackboard.el~, you can replace it or add additional themes into your local branch's: ~$HOME/.emacs.d/lisp/themes~ directory and they will also will work with this setup by choosing ~M-x load-theme~ or changing the last line within ~$HOME/.emacs.d/lisp/modules/06-interface.el~ to: ~(load-theme 'your-chosen-theme-name t)~

#+begin_quote 
=Note:= Obviously if you add more themes to your *Modular Emacs* ~themes~ directory you will be adding new un-tracked files to your cloned git repository! /(this one does not have an untracked/ *my-themes* /directory option like/ *my-modules* /is set up - but/ /I may add this later if needed)/...

Make sure you have checked out your own local branch before adding new themes or doing any customization outside the ~init.el~ file or the ~my-modules~ directory, OTHERWISE you will get out of sync with remote tracking branches!!!

Checking out a LOCAL untracked branch is the proper way to do code management of your own local custom changes tracked seporately under your own code revision schemes in place ready to merge any NEW changes from the remote Modular Emacs branches any time you feel that may be necessary... /(merging conflicts/ /along the way as needed)/
#+end_quote 

* ‚úÖ Default Package Features: /(built in)/ 
** CURRENTLY INSTALLED PACKAGES: 

As of <2025-07-08 Tue> This is a List of the currently installed packages from MELPA etc.
As you can see... It is NOT LONG and all of these I have VETTED and Allowed to contribute to Harmonic Alchemy Productions - Modular Emacs 

|-------------------------+---------------|
| PKG NAME:               |      Version: |
|-------------------------+---------------|
| abc-mode                | 20220713.1359 |
| auctex                  |        14.0.9 |
| csv-mode                |          1.27 |
| dired-launch            | 20250128.1955 |
| emms                    |            22 |
| exec-path-from-shell    |           2.2 |
| flyspell-correct-helm   |         0.6.1 |
| fountain-mode           |         3.7.3 |
| gnu-elpa-keyring-update |     2022.12.1 |
| gnuplot-mode            | 20171013.1616 |
| graphviz-dot-mode       |         0.4.2 |
| helm                    |         4.0.4 |
| helm-core               |         4.0.4 |
| logview                 |        0.19.2 |
| lua-mode                |      20221027 |
| markdown-mode           |           2.7 |
| nginx-mode              |        1.1.10 |
| ob-asymptote            |         1.0.2 |
| olivetti                |         2.0.7 |
| org-contrib             |           0.6 |
| org-superstar           |         1.5.1 |
| php-mode                |        1.26.1 |
| sass-mode               |        3.0.16 |
| simple-httpd            |         1.5.1 |
| ssh-config-mode         |  20250101.820 |
| toc-org                 |           1.1 |
| valign                  |         3.1.1 |
| which-key               |         3.6.1 |
| xterm-color             |           2.0 |
| yaml-mode               |        0.0.16 |
| ztree                   |         1.0.6 |
|-------------------------+---------------|

** Default Emacs Welcome Screen: (*scratch* Buffer)

The default Emacs Welcome Message is replaced with a custom greeting banner that shows the current emacs configuration, and date... With a famous Mark Twain quote /(My Favorite author)/... This quote may change from time to time with new updates...  

Use Scratch buffer to evaluate snippets of ~lisp~ without having to remove the welcome text... /(which are lisp comments)/

** Miscellaneus Packages: 

- [[https://github.com/milkypostman/powerline][powerline]] - Decorate ~mode-line~ & make it More Informative. 
  
   You can customize options and use themes etc... =THIS PACKAGE IS DISABLED BY DEFAULT=... I am back to the Emacs default mode line and I customize that instead. I did not remove the code to enable powerline though.  If you like powerline, the code for enabling it is located within ~02-package-conf.el~... Read the comments in that file to find it...

- [[https://github.com/auto-complete/auto-complete][auto-complete]] Easy Text Editing with suggested word completion. 
  
   =THIS PACKAGE IS DISABLED BY DEFAULT=...
   =I am NO LONGER USING THIS FLUF!=

   With AC enabled... When entering code, if you enter a function name and completion pops up, you are =TRAPPED! OUCH!!!= I don't like that! If I want to keep typing /(not accepting the default/
   /or maybe what I want is different than what it thinks?)/... It fights me...  I have to fool it by typing some junk and then pull off a text switch game.... LOL!

   The code that activates auto-complete has not been removed yet but it is commented out to disable ALL of it...

   If you LIKE AC, /(you are an odd one if you like being trapped)/ you can still go in and un-comment the related code within ~02-package-conf.el~ and enable that mess if you so choose!

   I may soon delete all that *FLUF* code out later however...

** Core Emacs System Related Packages: 

- [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] Get environment variables such as ~$PATH~ from the shell.  btw, this can be a tricky thing to do in emacs! I have struggled with this on Mac OS for a while! You may find
   you have to start Emacs from the terminal to get all your environment vars into Emacs!  More about that later.. A continuing saga!

  =Update 2020:= This has been working fine on my iMac since completely replacing Homebrew with MacPorts. IMHO /(biased by a host of/ /irritant issues using Homebrew over the years)/ MacPorts is a much better package manager all around... But not the popular one... Oh Well... %^) Also, since building my own Emacs from GNU source tree on my iMac, configured just how I like it, I have had no more nagging MacOS related issues... And I can have the latest Emacs the second it is released /(one build cycle away, or choose to go/ /back to my archived app if they introduce some bug or someting!/ :octocat:

** Emacs Helm & Extras: 

#+begin_quote 
"The prase /Form follows function/ has been misunderstood... /Form and function should be one, joined in a/
/spiritual union."/ - Frank Lloyd Wright...
#+end_quote

- [[https://github.com/emacs-helm/helm][helm]] Helm is an excellent example of *Form & Function Working Together as ONE*... Emacs incremental and narrowing framework that helps speed up operations on commands with structured command completions and more. It is a programmable interface (API) as well. To see how HELM can speed things up try a prefix key like: ~C-x~ or ~C-c~ or ~M-x~ and just wait before typing any more keys... You will see all the possible key-combos currently associated with that prefix key pop up in the HELM mini-buffer! Fantastic! No more guessing! /(Oops! What did I just do? OMG!)/ 

- [[https://emacs-helm.github.io/helm/][helm-core]] Development files for Helm (API) dependency.

- [[https://github.com/emacs-helm/helm][popup]] Popup is also a dependency package used by helm.

- [[https://github.com/justbur/emacs-which-key][which-key]] Another Dependency package used with helm... This package pops up suggestions for what can follow after pressing ~C-x~ key... /(this is what I was talking about/ /above in the intro paragraph for HELM)/ 

#+begin_quote 
=Note:= ~xah-fly-keys~ also uses helm to pop up leader key choices and extended menu...  Hit the ~SPACEBAR~ /(LEADER KEY)/ and wait a second for helm to pop up the list of options... /(with help feature and/          /pagination! Vital for learning all those keys!)/
#+end_quote

** Dired Related Packages: 

- [[https://github.com/thomp/dired-launch][dired-launch]] Open files directly within *dired* using default applications. Great for quick viewing PDF or Image files with your OS default viewer app! You can use ~dired-launch-extensions-map~ to specify, for a given file extension, one or more preferred applications by simply specifying the application as a string.
   
=example:=

#+begin_src elisp 
    (setf dired-launch-extensions-map 
          '(;; specify LibreOffice as the preferred application for
            ;; a Microsoft Excel file with the xslx extension
              ("xlsx" ("libreofficedev5.3"))

            ;; specify LibreOffice and Abiword as preferred applications for
            ;; an OpenDocument text file with the odt extension
              ("odt" ("libreofficedev5.3" "abiword"))))
#+end_src 

#+begin_quote 
=Note:= The above is for launching apps /(inline your emacs buffer)/ but there are many ways to skin this external app launch business... the following commands will launch a file in an external application whilst your cursor is positioned on a file in a dired buffer: ~W~, or ~SPC i w~ in *Xah Fly Keys*          command mode... /(Xah Fly Keys must be enabled for this/ /leader key sequence in Commnd Mode)/ but simply typing upper case W is easier IMHO. 
#+end_quote 

** TODO dev¬ßOps, sys$Admin, info‚ú∑Sec Related Packages: 

- [[https://github.com/fourier/ztree][ztree]] - *Ztree* is a project dedicated to implementation of several *text-tree* applications inside *GNU Emacs*. It consists of 2 subprojects: ~ztree-diff~ and ~ztree-dir~ /(the basis of ztree-diff)/... 

  The *ztree-diff* utility configured to work nicely within *HAP Modular* *Emacs* and clean up afterwards... /(still workng on the clean up part ;-)/ 

- [[https://www.emacswiki.org/emacs/SmartTabs][smart-tabs-mode]] - Intelligent tabs to end the f***ing tabs vs spaces war already =OK?= Click the Link & Read the docs... :-) 

  =THIS PACKAGE HAS BEEN DISABLED= Over the years I have found smart-tabs to be quite dyslexic and problematic.. For a while now, I simply disable TABs normally in Emacs and set indent space to 3 chars for the default... Other modes/packages have their own automatic ways to prettify the code... So I believe I am all set NOT using smart-tabs-mode going forward since Q4 2022...

  =IF YOU WOULD LIKE= to enable smart-tabs-mode =THEN:=

   =Edit:= ~$HOME/.emacs.d/lisp/modules/04-devOps-pkg-conf.el~ and remove the coment from the line below:

   #+begin_src elisp 
     (defvar me--req-devops-packages
       '(ztree
     ;    smart-tabs-mode  ;; DISABLED while exploring other options...
         ssh-config-mode
         yaml-mode
         nginx-mode
         php-mode          ;; SOON to be REPLACED
         indent-tools
         logview))
   #+end_src

   /(also un-comment any smart-tabs related configs/ /further down the page. Search for Heading Comments)/

- [[https://github.com/jhgorrell/ssh-config-mode-el][ssh-config-mode]] - A mode to edit SSH config files. If you edit those files you will see nice colors of keywords etc.

- [[https://github.com/emacs-php/php-mode][php-mode]] - Major mode for editing PHP code. This just works on PHP files alone... I am using xah-lee configs for all other web, JS, Yaml, etc... Xah is working on a php-mode... When that is finished I will most likely adopt it to match all the other web modes...

- yaml-mode - TBD
- nginx-mode - TBD
- indent-tools - TBD
- logview - TBD

** Writer's & Publishing Tools:

- [[https://github.com/rnkn/fountain-mode][fountain-mode]] *For Writers, Screenwriters, etc.:* 

  A markdown mode for dramatic arts! Fantastic!!! Fountain together with pandoc, allows you to do many conversions for screenplays to industry formats like *Final Draft* etc. but the best part is the text highlighting and colors make it very easy to read/rehearse dialog and cues right from an Emacs buffer!  Writing scripts in this mode is as natural as typing ~INT~ /(your line instantly turns into a scene heading!)_ Try it! Just start typing your script and find out what happens!  Modular Emacs Fountain Mode has been customized to use a nice looking Typewriter style mono font! It also opens up in olivetti mode _(next item below)_ automatically setting the line width to 100 chars... 

  =Update 2020:= I am writing docs for using fountain-mode within Emacs, as well as providing some example drama scripts and instructions on how to publish them to PDF using a tool called Afterwriting... Stay tuned for that...

- [[https://github.com/rnkn/olivetti][olivetti]] *Olivetti Adjusts Margins With Word Wrap* 

 This tool is great to use with fountain mode! Perfect for distraction free writing! I also enable this within ~rmoo~ /(if you have the games module enabled)/. Toggle it on and off within *Xah Fly Keys Command Mode* by hitting the backtick character: ~(`)~ key... Adjust the margin width within Xah Fly Keys Command Mode by hitting: ~SPACEBAR [~ or: ~SPACEBAR ]~ to shrink or grow respectively.

** Spelling: 

- [[https://github.com/][flyspell-correct]] This package provides functionality for correcting words via custom interfaces. 

  There are several functions for this: 
      ~flyspell-correct-wrapper~
      ~flyspell-correct-at-point~
      ~flyspell-correct-previous~
      ~flyspell-correct-next~

- [[https://github.com/pronobis/helm-flyspell][helm-flyspell]] *Helm extension for correcting words with flyspell* 

- [[https://github.com/d12frosted/flyspell-correct][flyspell-correct-helm]] *Nice helm interface for flyspell:* 

  Place your cursor after any misspelled word and type: ~C-;~ to see a list of suggestions...

** Key-bindings: 

- =NOTE1:= Key Bindings are ALL defined within: ~12-Xah-Fly-Keys.el~
          AND ~13-key-bindings.el~ I have not listd them here yet,
          as many of them have changed, or need to be removed etc.
          They will most definately be listed here nicely for
          *HAP Modular Emacs V4.0* /(soon to be released)/

- =Note2:= If you type a *prefix key*: /(e.g.,/ ~C-x~ /,/ ~C-c~ /, or/ ~M-x~ /, etc.)/  

  And then wait a second, =You Will See a HELM Pop Up= showing all the key commands available to choose from!!! *EURICA BABY!* This ALSO works for ~SPACEBAR~ in *Xah-Fly-Keys* command mode. *No guessing needed...* =The Helm Popup has a menu to= =navigate the whole list as well=... *Try it!!*

  /You will be using this to learn keys more than taking the/ /time to look them up in these docs or code because it's all/ /there at your fingertips, thanks to HELM.../

* üéÅ Optional Packages & Customization: 

Now it's time to forget boring defaults and really tune this baby up to be the best *DevOps* , *PubOPs* , *Lisp IDE* that it can be!

The following doc with guide you through that process:

- [[./Docs/ModE-Optional-Packages-y-Customization.md][Modular Emacs Customization]] - *Optional Packages & Customization*

#+begin_quote 
=Note:= These Extra Features are constantly /"a work in progress"/ as new options come up that work better, and other options turn out to be more trouble than worth... etc. etc. etc... At the same time I have to document all of this stuff and then revise, revise, revise... Many of you know this delima... %^) Org-Mode helps tremendously! I will be updating these extra docs after weeding out the dead-wood... /(which is my current task to get ready for/ /The major release of:/ *HAP Modular Emacs V4.0* /on the horizon.../
#+end_quote 

* üìã Meta:                                                    :noexport:meta: 
** Emacs Shorthand Command Key Notation: 

The command key conventions used in the instructions below, /(as well as all/ *Harmonic Alchemy Productions* /docs)/, follow *Standard Emacs* command key naming conventions.

Official GNU Emacs documentation uses a shorthand notation to indicate the *Ctrl* key as an upper case *C-* (/with minus appended/). Upper case *M-* (/with minus appended/) is the shorthand notation for the Emacs *META* key...

** Important Note For Mac Users: 

On Mac OS, *Modular Emacs* maps your *Ctrl* key to the *Apple Command* key. Emacs *META* is mapped to both *Alt* and *Ctrl* keys... Outside of Emacs all those keys function normally.  

Therefore, for Mac users, anytime you either see *C-* or *Ctrl* below, use your *Apple Command* key for that when using Modular Emacs. Anytime you see either *M-* or *META* below, use *Alt* or *Ctrl* keys for that when using Modular Emacs. 

Anytime you are using Modular Emacs following instructions from standard vanilla Emacs docs, keep in mind your ~Ctrl~ and ~META~ keys are not /"standard"/ anymore and you must make a mental translation.  Beyond that, you will be fine following other emacs tutorials etc.  Hey... you Mac enthusiasts are used to that kind of /"being different"/ stuff anyway, right? Being one of /"the rest of us"/ that is... What the heck does that mean anyway? LOL

The above key assignments were done to get the *Emacs C-* key closer to the space bar where it can be activated with your left thumb instead of contorting to get at it with your pinkie finger. This makes using *Xah Fly Keys* even easier to use and less stressful on your fingers...

In the Official Emacs documentation you will commonly find key command notations such as *C-x* or *M-x*... This means: Hold the *CTRL* or *META* key down while typing the *x* key.  

Any time you see this notation, regardless of what key may be connected to it with a dash (e.g., *C-c*, *M-5*, etc.), this means to hold the *CTRL* -or- *META* key down while you press the other key connected to it with the dash... If you have a command that includes many *C-key* or *M-key* commands in succession simply hold the *Ctrl*-or-*META* key down the entire time you type the other keys and then let go...

If you see other keys alone separated by a space after the *C-x* or *M-x* (e.g., ~C-x d~, ~M-x b~, etc.) this means to type that key AFTER letting go of the *Ctrl* -or- *META* key...

*Got that?* That's the key notation system we use here... It is all standard Emacs...  The above paragraphs are mostly for the benefit of new Emacs users! And there is more to learn below. If you are an Emacs/Org-Mode veteran please bear with us...

** Org Mode Timestamps and Clocking: 

This Template utilizes the default *Org-Mode:* "*C-c* ." command /(i.e., That's Ctrl-c and then type a dot. This Enters a timestamp range at the cursor position)/. The command employs *org-evaluate-time-range* to compute time on task.  This is useful for timesheets etc. 

In addition, the *Log Entry (template)* stores and tracks *Org-Mode :CLOCKING:* entries and displays results in a *Time Card Table* with total time computed... 

Common time clocking commands are defined within the *Log Entry (template)* itself. Any time you need to look up clocking commands, open the *:README:* drawer under the *Log Entry (template)* heading by placing your cursor over it and hitting *TAB*.

Additional commands for using *Org-Mode* with Modular Emacs will be explained here if needed, as well as other *Harmonic Alchemy Modular Emacs Templates* that get produced in the future...

** Reference: 
<<META_ref>> 

Here are Links to Information that may help you utilize Modular Emacs Document Skeleton templates to CREATE and PUBLISH your Docs from org-mode...

=Organized by Categories=

*** General Emacs: 

- [[https://emacsdocs.org/][Emacs Docs]] - /(Emacs Docs)/ 

  /The modern documentation website Emacs deserves./

- [[http://xahlee.info/][Xah Lee MAIN Website]] - /(Xah Lee's Main Website with Links to all his Blogs, Talk Show, etc.)/

- [[http://xahlee.info/emacs/emacs/blog.html][Xah Lee EMACS Blog]] - /(Xah Lee's Emacs Blog with Links to Tutorials, etc.)/

- [[http://xahlee.info/emacs/emacs/emacs_keys_index.html][Xah Lee EMACS KEYS]] - /(Xah Lee's Emacs KEYS Blog with Links to Tutorials, etc.)/

- [[http://xahlee.info/emacs/misc/xah-fly-keys.html][Xah Fly Keys]] - /(Xah Lee's Xah-fly-keys Blog with Links to Tutorials, etc.)/

- [[https://github.com/xahlee/xah-fly-keys][Xah Fly Keys - GitHub]] - /(Xah Lee's Xah-fly-keys GitHub Repository)/

*** Emacs Lisp: /(eLisp)/ 

- [[https://emacsdocs.org/docs/elisp/Emacs-Lisp][Emacs Lisp Manual]] - /(Emacs Docs)/ 

  /This is the GNU Emacs Lisp Reference Manual corresponding to Emacs version 27.2/

- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][EMACS LISP MANUAL]] - /(GNU.org)/ 

  /This is the OFFICIAL GNU Emacs Lisp Reference Manual corresponding to Emacs version 30.1/

- [[http://xahlee.info/emacs/emacs/practical_elisp.html][Practical Emacs Lisp]] - /(Xah Lee's Practical Lisp Blog)/ 

  /(With Links to both Standard lisp and elisp, Tutorials, etc.)/ 

*** ORG-MODE: 

- [[https://emacsdocs.org/docs/org/The-Org-Manual][The Org Manual]]  - /(Emacs Docs)/ 

  /Emacs Docs Format - This manual is currently for Org version 9.4. Check Link Below to LATEST VERSION to see if it is up to date.../

- [[https://orgmode.org/manual][THE ORG MANUAL]] - /(Orgmode.org)/ 

  /OFFICIAL Orgmode.org Manual Latest Version/

- [[https://orgmode.org/worg/][Hello Worg, the Org-Mode Community!]] - /(WORG)/ 

  /Worg documentation & Org-Mode Resources.../

- [[https://orgmode.org/worg/dev/org-export-reference.html][Org Export Reference]] - /(WORG)/ 

  /This document is aimed at back-end developers for the generic export engine ox.el. It assumes a good understanding of Org syntax from the reader./

- [[https://orgmode.org/manual/In_002dbuffer-Settings.html][Summary of In-Buffer Settings]] - /The ORG Manual/ 

- [[https://orgmode.org/manual/Export-Settings.html#Export-Settings][Export Settings]] - /The ORG Manual/ 

- [[https://orgmode.org/manual/Embedded-LaTeX.html][12.5 Embedded LaTeX]] - /(The Org Manual)/ 

- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]] - /(Norang.ca Public Docs)/

*** Tools for ORG-MODE / LaTeX: 

- [[https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode][Literate Programming]] - /(Article by: by Justin Worthe)/ 

  /(Literate Programming - Empower Your Writing with Emacs Org-Mode)/

- [[https://www.ctan.org/pkg/latexmk/][latexmk - Fully Automated LaTeX Document Generation]] - /(CTAN)/ 

  /Latexmk completely automates the process of generating a LaTeX document. Given the source files for a document, latexmk issues the appropriate sequence of commands to generate a .dvi, .ps, .pdf or hardcopy version of the document./

- [[https://orgmode.org/manual/LaTeX-fragments.html][12.5.1 LaTeX fragments]] - /(The Org Manual)/

- [[https://emacsdocs.org/docs/org/Images-in-LaTeX-export#nil][Images in LaTeX export]] - /(Emacs Docs)/ 

  /placeholder Text.../

- [[https://ctan.org/pkg/nopageno][nopageno ‚Äì No Page Numbers in LaTeX Documents]] - /(CTAN)/ 

  /CTAN Comprehensive TeX Archive Network.../

- [[https://www.miskatonic.org/2023/11/15/minted/][Export Org SRC Code Blocks to LaTeX w Minted]] - /(Miskatonic University Press)/ 

  When minted is one of the included packages for Org-Mode export, it‚Äôs always necessary to run ~pdflatex~ ~-shell-escape~ to compile the PDF, even if there are no source blocks... This article explains ways around that problem - /(code from Xah Lee)/

- [[https://tex.stackexchange.com/questions/22741/how-to-remove-header-on-a-certain-page][How to Remove Header on a Certain Page]] - /(Stackexchange)/ 

  /A Question/Answer on Stackexchange TeX Discussion Group.../

- [[Https://Github.Com/GeneKao/Orgmode-Latex-Templates][Org-Mode Starter Codes for Exporting to LaTeX PDF:]] - /(GeneKao@GitHub)/ 

  /This repo contains different templates for org-mode -> LaTeX and PDF. Along with the document templates... There are ALSO many great tips for formatting exotic figures and MATH.../ 

  /Created by:/ [[https://www.geneatcg.com/][GeneKao]] /- Gene Ting-Chun Kao - R&D Computational Geometry Processing Engineer at Ansys - Meshing Development Unit (MDU).../

- [[https://www.geneatcg.com/emacs-org-mode-export-to-pdf/][Emacs Org Mode export to pdf]] - /(Article by: Gene Ting-Chun Kao)/

=PIM & TAGGING:=

- [[https://www.gnu.org/software/emacs/manual/html_node/org/Tags.html][TAGS]] - /(GNU.org)/ 

  An excellent way to implement labels and contexts for cross-correlating information is to assign tags to headlines. Org mode has extensive support for tags...

- [[https://karl-voit.at/2022/01/29/How-to-Use-Tags/][How to Use Tags]] - /(Home Page of Karl Voit)/ 

  /(HOW and WHY they are IMPORTANT)/
  =Because EVERYTHING is MISCELLANEOUS in our minds=...

- [[https://github.com/harmonicalchemy/Memacs][Memacs]] - /(fork of Karl Voit's Repo: harmonicalchemy@GitHub)/ 

  Memacs extracts metadata /(subjects, timestamps, contact information, etc.)/ from many different existing data sources /(file names, emails, tweets, bookmarks, etc.)/ on your computer and generates files which are readable by GNU Emacs with Org-Mode...

=ORG-TABLES:=

- [[https://www.teachmaths.org/20250117_orgmode-tables/][Exporting Org Mode Tables to LaTeX]] - /(teachmaths.org)/ 

  The tables produced by Org mode are pretty basic by default. However, you can use the LaTeX *tabularray* package to customise the look of your tables. 

- [[https://emacs.stackexchange.com/questions/37550/preventing-org-mode-pdf-tables-from-running-off-the-page?noredirect=1&lq=1][Preventing Org-Mode PDF Tables from Running Off the Page]] - /(Stackexchange)/ 

  The answer to this question explains: ~longtable :align |p{3cm}|p{6cm}|l|l|l|l|l|l|~ /(etc.)/
  Where you replace any ~| l |~ /(column)/ with ~p{*cm}~ where ~*~ can be any numeral as required to fit table to page... /(i.e., hard wired column widths)/

- [[https://tex.stackexchange.com/questions/721496/wide-landscape-table-to-fit-page-margins?rq=1][Wide Landscape Table to Fit Page Margins]] - /(Stackexchange)/ 

  /A Question/Answer on Stackexchange TeX Discussion Group.../

=Blogging Tools:=

- [[https://orgmode.org/worg/org-blog-wiki.html][Blogs and Wikis with Org]] /(Blogging tools - with links to GitHub projects)/

- [[https://github.com/org2blog/org2blog?tab=readme-ov-file#make-your-first-post-in-less-5-minutes][org2blog - Publish to WordPress Blog]] -  /(Puneeth Chaganti @ Github)/ 

  /Org2Blog is SUPPOSEDLY the most advanced WordPress blog editor and manager available today.../

- [[https://github.com/novoid/lazyblorg][lazyblorg]] - /(novoid@GitHub - Karl Voit)/ 

  /Blogging with Org-mode for very lazy people/

*** AUCTeX: 

- [[https://emacsdocs.org/docs/auctex/Top][AUCTeX Manual ]] - /(Emacs Docs)/ 

  /This manual is for AUCTeX (version 12.3 from 2020-10-10), a sophisticated TeX environment for Emacs./

- [[https://elpa.gnu.org/packages/doc/auctex.html][OFFICIAL AUCTeX MANUAL]] - /(GNU.org)/ 

  /This is the LATEST Version of the OFFICIAL GNU AUCTeX Manual/

*** LaTeX: 

- [[https://tug.org/][TeX Users Group]] - /(TUG.org)/

- [[https://ctan.org/][Comprehensive TeX Archive Network]] - /(CTAN)/ 

- [[https://latex-tutorial.com/documentclass-latex/][Your Guide to documentclass LaTeX: Types and options]] - /LaTeX-Tutorial.com/

- [[https://www.ctan.org/pkg/memoir][The Memoir Document Class]] - /(CTAN Page)/ 

- [[https://mirror.math.princeton.edu/pub/CTAN/macros/latex/contrib/memoir/memman.pdf][The Memoir Class - Manual:]] - /(CTAN PDF)/

- [[https://www.linuxjournal.com/content/org-mode-latex-exporter-latex-non-texers][The org-mode LaTeX exporter]] - /(LaTeX for non-TEXers) LINUX Journal/

- [[https://tufte-latex.github.io/tufte-latex/][Tufte-LaTeX]] - /(Tufte LaTeX PAGE @GitHub.io)/ 

  /A Tufte-inspired LaTeX class for producing handouts, papers, and books... This site is home to LaTeX classes for producing handouts and books according to the style of Edward R. Tufte and Richard Feynman./

- [[https://github.com/Tufte-LaTeX/tufte-latex][tufte-latex CLASS]] - /(Tufte-Latex@GitHub)/ 

  /The GitHub Repo for the Tufte-inspired LaTeX Class.../

- [[https://damitr.org/2014/01/09/latex-tufte-class-in-org-mode/][Latex Tufte class in org-mode]] - /(Article on damitr.org)/ 

  Edward Tufte is known for graphical excellence in his famous books. Some enthusiasts combined his design principles into LaTeX and you have the tufte-book and tufte-handout classes for excellence in typesetting. This has support for side notes, margin figures, full width figures etc.

  The Instructions within this article are integrated with ORG-MODE to produce results...

*** LaTeX Fonts: 

- [[https://tug.org/FontCatalogue/][The LaTeX Font Catalogue]] - /(TUG.org)/

- [[https://tug.org/FontCatalogue/seriffonts.html][Serif Fonts]] - /(TUG.org)/ 

- [[https://tug.org/FontCatalogue/sansseriffonts.html][Sans Serif Fonts]] - /(TUG.org)/ 

- [[https://tug.org/FontCatalogue/typewriterfonts.html][Typewriter Fonts]] - /(TUG.org)/ 

- [[https://tug.org/FontCatalogue/calligraphicalfonts.html][Calligraphical Fonts]] - /(TUG.org)/

- [[https://en.wikibooks.org/wiki/LaTeX/Fonts][LaTeX Fonts]] - /(WIKIbooks.org)/

*** LaTeX Music Related Software: 

- [[https://www-cs-faculty.stanford.edu/~knuth/organ.html][Donald Knuth's Pipe Organ]] - /(Stanford.edu)/ 

  =The Organ of Don and Jill Knuth= - This sixteen-rank organ was designed and built for our home by Abbott and Sieker of Los Angeles, California, as their ‚ÄúOpus 67.‚Äù It has 812 pipes, separated into three divisions...

- [[https://icking-music-archive.org/][Werner Icking Music Archive]] - /(WIMA)/

- [[https://icking-music-archive.org/software/htdocs/index.html][MusiXTeX and Related Software]] - /(WIMA)/

- [[https://ctan.org/pkg/musixtex][MusiXTeX ‚Äì Sophisticated Music Typesetting]] -  /(CTAN)/

- [[https://tug.ctan.org/info/latex4musicians/latex4musicians.pdf][LaTeX for Musicians by Guido Gonzato, PhD]] - /(CTAN - PDF)/ 

  This guide shows how to create LaTeX documents that include several kinds of music elements, from very simple to quite complex. Music features may consist of music symbols, song lyrics, guitar chords diagrams, lead sheets, music excerpts, guitar tablatures, multi-page scores.

